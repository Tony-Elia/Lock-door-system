
mcu1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000be  00800060  00002d82  00002e16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080011e  0080011e  00002ed4  2**0
                  ALLOC
  3 .stab         00002238  00000000  00000000  00002ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000bb4  00000000  00000000  0000510c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009854  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000099b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009c41  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a40f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 37 0f 	jmp	0x1e6e	; 0x1e6e <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e8       	ldi	r30, 0x82	; 130
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 31       	cpi	r26, 0x1E	; 30
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e1       	ldi	r26, 0x1E	; 30
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 31       	cpi	r26, 0x1F	; 31
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <main>
      8a:	0c 94 bf 16 	jmp	0x2d7e	; 0x2d7e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3c 16 	jmp	0x2c78	; 0x2c78 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e1       	ldi	r26, 0x14	; 20
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 58 16 	jmp	0x2cb0	; 0x2cb0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 48 16 	jmp	0x2c90	; 0x2c90 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 64 16 	jmp	0x2cc8	; 0x2cc8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 48 16 	jmp	0x2c90	; 0x2c90 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 64 16 	jmp	0x2cc8	; 0x2cc8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3c 16 	jmp	0x2c78	; 0x2c78 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	84 e1       	ldi	r24, 0x14	; 20
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 58 16 	jmp	0x2cb0	; 0x2cb0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 48 16 	jmp	0x2c90	; 0x2c90 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 64 16 	jmp	0x2cc8	; 0x2cc8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 48 16 	jmp	0x2c90	; 0x2c90 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 64 16 	jmp	0x2cc8	; 0x2cc8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 48 16 	jmp	0x2c90	; 0x2c90 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 64 16 	jmp	0x2cc8	; 0x2cc8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 4c 16 	jmp	0x2c98	; 0x2c98 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 68 16 	jmp	0x2cd0	; 0x2cd0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <KeyPad_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <KeyPad_getPressedKey+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     b50:	1a 82       	std	Y+2, r1	; 0x02
     b52:	54 c0       	rjmp	.+168    	; 0xbfc <KeyPad_getPressedKey+0xb6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00000001<<col);
     b54:	e7 e3       	ldi	r30, 0x37	; 55
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	28 2f       	mov	r18, r24
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <KeyPad_getPressedKey+0x22>
     b64:	88 0f       	add	r24, r24
     b66:	99 1f       	adc	r25, r25
     b68:	2a 95       	dec	r18
     b6a:	e2 f7       	brpl	.-8      	; 0xb64 <KeyPad_getPressedKey+0x1e>
     b6c:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00000001<<col));
     b6e:	e8 e3       	ldi	r30, 0x38	; 56
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	8a 81       	ldd	r24, Y+2	; 0x02
     b74:	28 2f       	mov	r18, r24
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	02 2e       	mov	r0, r18
     b7e:	02 c0       	rjmp	.+4      	; 0xb84 <KeyPad_getPressedKey+0x3e>
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	0a 94       	dec	r0
     b86:	e2 f7       	brpl	.-8      	; 0xb80 <KeyPad_getPressedKey+0x3a>
     b88:	80 95       	com	r24
     b8a:	80 83       	st	Z, r24

			for(row=0;row<N_row;row++) /* loop for rows */
     b8c:	19 82       	std	Y+1, r1	; 0x01
     b8e:	30 c0       	rjmp	.+96     	; 0xbf0 <KeyPad_getPressedKey+0xaa>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row << 3)) /* if the switch is press in this row */
     b90:	e6 e3       	ldi	r30, 0x36	; 54
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	80 81       	ld	r24, Z
     b96:	48 2f       	mov	r20, r24
     b98:	50 e0       	ldi	r21, 0x00	; 0
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
     b9c:	28 2f       	mov	r18, r24
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	02 2e       	mov	r0, r18
     ba6:	02 c0       	rjmp	.+4      	; 0xbac <KeyPad_getPressedKey+0x66>
     ba8:	88 0f       	add	r24, r24
     baa:	99 1f       	adc	r25, r25
     bac:	0a 94       	dec	r0
     bae:	e2 f7       	brpl	.-8      	; 0xba8 <KeyPad_getPressedKey+0x62>
     bb0:	88 0f       	add	r24, r24
     bb2:	99 1f       	adc	r25, r25
     bb4:	88 0f       	add	r24, r24
     bb6:	99 1f       	adc	r25, r25
     bb8:	88 0f       	add	r24, r24
     bba:	99 1f       	adc	r25, r25
     bbc:	84 23       	and	r24, r20
     bbe:	95 23       	and	r25, r21
     bc0:	00 97       	sbiw	r24, 0x00	; 0
     bc2:	99 f4       	brne	.+38     	; 0xbea <KeyPad_getPressedKey+0xa4>
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
     bc4:	89 81       	ldd	r24, Y+1	; 0x01
     bc6:	28 2f       	mov	r18, r24
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	c9 01       	movw	r24, r18
     bcc:	88 0f       	add	r24, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	82 0f       	add	r24, r18
     bd2:	93 1f       	adc	r25, r19
     bd4:	98 2f       	mov	r25, r24
     bd6:	8a 81       	ldd	r24, Y+2	; 0x02
     bd8:	89 0f       	add	r24, r25
     bda:	8f 5f       	subi	r24, 0xFF	; 255
     bdc:	0e 94 03 06 	call	0xc06	; 0xc06 <KeyPad_4x3_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	cf 91       	pop	r28
     be6:	df 91       	pop	r29
     be8:	08 95       	ret
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00000001<<col));

			for(row=0;row<N_row;row++) /* loop for rows */
     bea:	89 81       	ldd	r24, Y+1	; 0x01
     bec:	8f 5f       	subi	r24, 0xFF	; 255
     bee:	89 83       	std	Y+1, r24	; 0x01
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	84 30       	cpi	r24, 0x04	; 4
     bf4:	68 f2       	brcs	.-102    	; 0xb90 <KeyPad_getPressedKey+0x4a>
uint8 KeyPad_getPressedKey(void)
{
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     bf6:	8a 81       	ldd	r24, Y+2	; 0x02
     bf8:	8f 5f       	subi	r24, 0xFF	; 255
     bfa:	8a 83       	std	Y+2, r24	; 0x02
     bfc:	8a 81       	ldd	r24, Y+2	; 0x02
     bfe:	83 30       	cpi	r24, 0x03	; 3
     c00:	08 f4       	brcc	.+2      	; 0xc04 <KeyPad_getPressedKey+0xbe>
     c02:	a8 cf       	rjmp	.-176    	; 0xb54 <KeyPad_getPressedKey+0xe>
     c04:	a5 cf       	rjmp	.-182    	; 0xb50 <KeyPad_getPressedKey+0xa>

00000c06 <KeyPad_4x3_adjustKeyNumber>:
}

#if (N_col == 3) 

static uint8 KeyPad_4x3_adjustKeyNumber(uint8 button_number)
{
     c06:	df 93       	push	r29
     c08:	cf 93       	push	r28
     c0a:	00 d0       	rcall	.+0      	; 0xc0c <KeyPad_4x3_adjustKeyNumber+0x6>
     c0c:	00 d0       	rcall	.+0      	; 0xc0e <KeyPad_4x3_adjustKeyNumber+0x8>
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
     c12:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	28 2f       	mov	r18, r24
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	3c 83       	std	Y+4, r19	; 0x04
     c1c:	2b 83       	std	Y+3, r18	; 0x03
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	9c 81       	ldd	r25, Y+4	; 0x04
     c22:	8a 30       	cpi	r24, 0x0A	; 10
     c24:	91 05       	cpc	r25, r1
     c26:	81 f0       	breq	.+32     	; 0xc48 <KeyPad_4x3_adjustKeyNumber+0x42>
     c28:	2b 81       	ldd	r18, Y+3	; 0x03
     c2a:	3c 81       	ldd	r19, Y+4	; 0x04
     c2c:	2a 30       	cpi	r18, 0x0A	; 10
     c2e:	31 05       	cpc	r19, r1
     c30:	a4 f0       	brlt	.+40     	; 0xc5a <KeyPad_4x3_adjustKeyNumber+0x54>
     c32:	8b 81       	ldd	r24, Y+3	; 0x03
     c34:	9c 81       	ldd	r25, Y+4	; 0x04
     c36:	8b 30       	cpi	r24, 0x0B	; 11
     c38:	91 05       	cpc	r25, r1
     c3a:	49 f0       	breq	.+18     	; 0xc4e <KeyPad_4x3_adjustKeyNumber+0x48>
     c3c:	2b 81       	ldd	r18, Y+3	; 0x03
     c3e:	3c 81       	ldd	r19, Y+4	; 0x04
     c40:	2c 30       	cpi	r18, 0x0C	; 12
     c42:	31 05       	cpc	r19, r1
     c44:	39 f0       	breq	.+14     	; 0xc54 <KeyPad_4x3_adjustKeyNumber+0x4e>
     c46:	09 c0       	rjmp	.+18     	; 0xc5a <KeyPad_4x3_adjustKeyNumber+0x54>
	{
		case 10: return 'C'; // ASCII Code of *
     c48:	33 e4       	ldi	r19, 0x43	; 67
     c4a:	3a 83       	std	Y+2, r19	; 0x02
     c4c:	0a c0       	rjmp	.+20     	; 0xc62 <KeyPad_4x3_adjustKeyNumber+0x5c>
				 break;
		case 11: return '0';
     c4e:	80 e3       	ldi	r24, 0x30	; 48
     c50:	8a 83       	std	Y+2, r24	; 0x02
     c52:	07 c0       	rjmp	.+14     	; 0xc62 <KeyPad_4x3_adjustKeyNumber+0x5c>
				 break;		
		case 12: return '='; // ASCII Code of #
     c54:	9d e3       	ldi	r25, 0x3D	; 61
     c56:	9a 83       	std	Y+2, r25	; 0x02
     c58:	04 c0       	rjmp	.+8      	; 0xc62 <KeyPad_4x3_adjustKeyNumber+0x5c>
				 break;
		default: return (button_number + '0');
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	28 2f       	mov	r18, r24
     c5e:	20 5d       	subi	r18, 0xD0	; 208
     c60:	2a 83       	std	Y+2, r18	; 0x02
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
     c64:	0f 90       	pop	r0
     c66:	0f 90       	pop	r0
     c68:	0f 90       	pop	r0
     c6a:	0f 90       	pop	r0
     c6c:	cf 91       	pop	r28
     c6e:	df 91       	pop	r29
     c70:	08 95       	ret

00000c72 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
     c72:	df 93       	push	r29
     c74:	cf 93       	push	r28
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
     c7a:	aa e3       	ldi	r26, 0x3A	; 58
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	ea e3       	ldi	r30, 0x3A	; 58
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	80 63       	ori	r24, 0x30	; 48
     c86:	8c 93       	st	X, r24
	
	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
     c88:	aa e3       	ldi	r26, 0x3A	; 58
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	ea e3       	ldi	r30, 0x3A	; 58
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	8f 60       	ori	r24, 0x0F	; 15
     c94:	8c 93       	st	X, r24
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
     c96:	82 e0       	ldi	r24, 0x02	; 2
     c98:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
     c9c:	88 e2       	ldi	r24, 0x28	; 40
     c9e:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
     ca2:	8c e0       	ldi	r24, 0x0C	; 12
     ca4:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_sendCommand>
}
     cae:	cf 91       	pop	r28
     cb0:	df 91       	pop	r29
     cb2:	08 95       	ret

00000cb4 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
     cb4:	0f 93       	push	r16
     cb6:	1f 93       	push	r17
     cb8:	df 93       	push	r29
     cba:	cf 93       	push	r28
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
     cc0:	c3 56       	subi	r28, 0x63	; 99
     cc2:	d0 40       	sbci	r29, 0x00	; 0
     cc4:	0f b6       	in	r0, 0x3f	; 63
     cc6:	f8 94       	cli
     cc8:	de bf       	out	0x3e, r29	; 62
     cca:	0f be       	out	0x3f, r0	; 63
     ccc:	cd bf       	out	0x3d, r28	; 61
     cce:	fe 01       	movw	r30, r28
     cd0:	ed 59       	subi	r30, 0x9D	; 157
     cd2:	ff 4f       	sbci	r31, 0xFF	; 255
     cd4:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
     cd6:	ab e3       	ldi	r26, 0x3B	; 59
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	eb e3       	ldi	r30, 0x3B	; 59
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	8f 7e       	andi	r24, 0xEF	; 239
     ce2:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
     ce4:	ab e3       	ldi	r26, 0x3B	; 59
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	eb e3       	ldi	r30, 0x3B	; 59
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	8c 93       	st	X, r24
     cf0:	fe 01       	movw	r30, r28
     cf2:	e1 5a       	subi	r30, 0xA1	; 161
     cf4:	ff 4f       	sbci	r31, 0xFF	; 255
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	a0 e8       	ldi	r26, 0x80	; 128
     cfc:	bf e3       	ldi	r27, 0x3F	; 63
     cfe:	80 83       	st	Z, r24
     d00:	91 83       	std	Z+1, r25	; 0x01
     d02:	a2 83       	std	Z+2, r26	; 0x02
     d04:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d06:	8e 01       	movw	r16, r28
     d08:	05 5a       	subi	r16, 0xA5	; 165
     d0a:	1f 4f       	sbci	r17, 0xFF	; 255
     d0c:	fe 01       	movw	r30, r28
     d0e:	e1 5a       	subi	r30, 0xA1	; 161
     d10:	ff 4f       	sbci	r31, 0xFF	; 255
     d12:	60 81       	ld	r22, Z
     d14:	71 81       	ldd	r23, Z+1	; 0x01
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	4a e7       	ldi	r20, 0x7A	; 122
     d20:	53 e4       	ldi	r21, 0x43	; 67
     d22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d26:	dc 01       	movw	r26, r24
     d28:	cb 01       	movw	r24, r22
     d2a:	f8 01       	movw	r30, r16
     d2c:	80 83       	st	Z, r24
     d2e:	91 83       	std	Z+1, r25	; 0x01
     d30:	a2 83       	std	Z+2, r26	; 0x02
     d32:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d34:	fe 01       	movw	r30, r28
     d36:	e5 5a       	subi	r30, 0xA5	; 165
     d38:	ff 4f       	sbci	r31, 0xFF	; 255
     d3a:	60 81       	ld	r22, Z
     d3c:	71 81       	ldd	r23, Z+1	; 0x01
     d3e:	82 81       	ldd	r24, Z+2	; 0x02
     d40:	93 81       	ldd	r25, Z+3	; 0x03
     d42:	20 e0       	ldi	r18, 0x00	; 0
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	40 e8       	ldi	r20, 0x80	; 128
     d48:	5f e3       	ldi	r21, 0x3F	; 63
     d4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d4e:	88 23       	and	r24, r24
     d50:	44 f4       	brge	.+16     	; 0xd62 <LCD_sendCommand+0xae>
		__ticks = 1;
     d52:	fe 01       	movw	r30, r28
     d54:	e7 5a       	subi	r30, 0xA7	; 167
     d56:	ff 4f       	sbci	r31, 0xFF	; 255
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	91 83       	std	Z+1, r25	; 0x01
     d5e:	80 83       	st	Z, r24
     d60:	64 c0       	rjmp	.+200    	; 0xe2a <LCD_sendCommand+0x176>
	else if (__tmp > 65535)
     d62:	fe 01       	movw	r30, r28
     d64:	e5 5a       	subi	r30, 0xA5	; 165
     d66:	ff 4f       	sbci	r31, 0xFF	; 255
     d68:	60 81       	ld	r22, Z
     d6a:	71 81       	ldd	r23, Z+1	; 0x01
     d6c:	82 81       	ldd	r24, Z+2	; 0x02
     d6e:	93 81       	ldd	r25, Z+3	; 0x03
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	3f ef       	ldi	r19, 0xFF	; 255
     d74:	4f e7       	ldi	r20, 0x7F	; 127
     d76:	57 e4       	ldi	r21, 0x47	; 71
     d78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d7c:	18 16       	cp	r1, r24
     d7e:	0c f0       	brlt	.+2      	; 0xd82 <LCD_sendCommand+0xce>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <LCD_sendCommand+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d82:	fe 01       	movw	r30, r28
     d84:	e1 5a       	subi	r30, 0xA1	; 161
     d86:	ff 4f       	sbci	r31, 0xFF	; 255
     d88:	60 81       	ld	r22, Z
     d8a:	71 81       	ldd	r23, Z+1	; 0x01
     d8c:	82 81       	ldd	r24, Z+2	; 0x02
     d8e:	93 81       	ldd	r25, Z+3	; 0x03
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	40 e2       	ldi	r20, 0x20	; 32
     d96:	51 e4       	ldi	r21, 0x41	; 65
     d98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d9c:	dc 01       	movw	r26, r24
     d9e:	cb 01       	movw	r24, r22
     da0:	8e 01       	movw	r16, r28
     da2:	07 5a       	subi	r16, 0xA7	; 167
     da4:	1f 4f       	sbci	r17, 0xFF	; 255
     da6:	bc 01       	movw	r22, r24
     da8:	cd 01       	movw	r24, r26
     daa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dae:	dc 01       	movw	r26, r24
     db0:	cb 01       	movw	r24, r22
     db2:	f8 01       	movw	r30, r16
     db4:	91 83       	std	Z+1, r25	; 0x01
     db6:	80 83       	st	Z, r24
     db8:	1f c0       	rjmp	.+62     	; 0xdf8 <LCD_sendCommand+0x144>
     dba:	fe 01       	movw	r30, r28
     dbc:	e9 5a       	subi	r30, 0xA9	; 169
     dbe:	ff 4f       	sbci	r31, 0xFF	; 255
     dc0:	89 e1       	ldi	r24, 0x19	; 25
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	91 83       	std	Z+1, r25	; 0x01
     dc6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dc8:	fe 01       	movw	r30, r28
     dca:	e9 5a       	subi	r30, 0xA9	; 169
     dcc:	ff 4f       	sbci	r31, 0xFF	; 255
     dce:	80 81       	ld	r24, Z
     dd0:	91 81       	ldd	r25, Z+1	; 0x01
     dd2:	01 97       	sbiw	r24, 0x01	; 1
     dd4:	f1 f7       	brne	.-4      	; 0xdd2 <LCD_sendCommand+0x11e>
     dd6:	fe 01       	movw	r30, r28
     dd8:	e9 5a       	subi	r30, 0xA9	; 169
     dda:	ff 4f       	sbci	r31, 0xFF	; 255
     ddc:	91 83       	std	Z+1, r25	; 0x01
     dde:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     de0:	de 01       	movw	r26, r28
     de2:	a7 5a       	subi	r26, 0xA7	; 167
     de4:	bf 4f       	sbci	r27, 0xFF	; 255
     de6:	fe 01       	movw	r30, r28
     de8:	e7 5a       	subi	r30, 0xA7	; 167
     dea:	ff 4f       	sbci	r31, 0xFF	; 255
     dec:	80 81       	ld	r24, Z
     dee:	91 81       	ldd	r25, Z+1	; 0x01
     df0:	01 97       	sbiw	r24, 0x01	; 1
     df2:	11 96       	adiw	r26, 0x01	; 1
     df4:	9c 93       	st	X, r25
     df6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df8:	fe 01       	movw	r30, r28
     dfa:	e7 5a       	subi	r30, 0xA7	; 167
     dfc:	ff 4f       	sbci	r31, 0xFF	; 255
     dfe:	80 81       	ld	r24, Z
     e00:	91 81       	ldd	r25, Z+1	; 0x01
     e02:	00 97       	sbiw	r24, 0x00	; 0
     e04:	d1 f6       	brne	.-76     	; 0xdba <LCD_sendCommand+0x106>
     e06:	27 c0       	rjmp	.+78     	; 0xe56 <LCD_sendCommand+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e08:	8e 01       	movw	r16, r28
     e0a:	07 5a       	subi	r16, 0xA7	; 167
     e0c:	1f 4f       	sbci	r17, 0xFF	; 255
     e0e:	fe 01       	movw	r30, r28
     e10:	e5 5a       	subi	r30, 0xA5	; 165
     e12:	ff 4f       	sbci	r31, 0xFF	; 255
     e14:	60 81       	ld	r22, Z
     e16:	71 81       	ldd	r23, Z+1	; 0x01
     e18:	82 81       	ldd	r24, Z+2	; 0x02
     e1a:	93 81       	ldd	r25, Z+3	; 0x03
     e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e20:	dc 01       	movw	r26, r24
     e22:	cb 01       	movw	r24, r22
     e24:	f8 01       	movw	r30, r16
     e26:	91 83       	std	Z+1, r25	; 0x01
     e28:	80 83       	st	Z, r24
     e2a:	de 01       	movw	r26, r28
     e2c:	ab 5a       	subi	r26, 0xAB	; 171
     e2e:	bf 4f       	sbci	r27, 0xFF	; 255
     e30:	fe 01       	movw	r30, r28
     e32:	e7 5a       	subi	r30, 0xA7	; 167
     e34:	ff 4f       	sbci	r31, 0xFF	; 255
     e36:	80 81       	ld	r24, Z
     e38:	91 81       	ldd	r25, Z+1	; 0x01
     e3a:	8d 93       	st	X+, r24
     e3c:	9c 93       	st	X, r25
     e3e:	fe 01       	movw	r30, r28
     e40:	eb 5a       	subi	r30, 0xAB	; 171
     e42:	ff 4f       	sbci	r31, 0xFF	; 255
     e44:	80 81       	ld	r24, Z
     e46:	91 81       	ldd	r25, Z+1	; 0x01
     e48:	01 97       	sbiw	r24, 0x01	; 1
     e4a:	f1 f7       	brne	.-4      	; 0xe48 <LCD_sendCommand+0x194>
     e4c:	fe 01       	movw	r30, r28
     e4e:	eb 5a       	subi	r30, 0xAB	; 171
     e50:	ff 4f       	sbci	r31, 0xFF	; 255
     e52:	91 83       	std	Z+1, r25	; 0x01
     e54:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
     e56:	ab e3       	ldi	r26, 0x3B	; 59
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	eb e3       	ldi	r30, 0x3B	; 59
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	80 62       	ori	r24, 0x20	; 32
     e62:	8c 93       	st	X, r24
     e64:	fe 01       	movw	r30, r28
     e66:	ef 5a       	subi	r30, 0xAF	; 175
     e68:	ff 4f       	sbci	r31, 0xFF	; 255
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	a0 e8       	ldi	r26, 0x80	; 128
     e70:	bf e3       	ldi	r27, 0x3F	; 63
     e72:	80 83       	st	Z, r24
     e74:	91 83       	std	Z+1, r25	; 0x01
     e76:	a2 83       	std	Z+2, r26	; 0x02
     e78:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e7a:	8e 01       	movw	r16, r28
     e7c:	03 5b       	subi	r16, 0xB3	; 179
     e7e:	1f 4f       	sbci	r17, 0xFF	; 255
     e80:	fe 01       	movw	r30, r28
     e82:	ef 5a       	subi	r30, 0xAF	; 175
     e84:	ff 4f       	sbci	r31, 0xFF	; 255
     e86:	60 81       	ld	r22, Z
     e88:	71 81       	ldd	r23, Z+1	; 0x01
     e8a:	82 81       	ldd	r24, Z+2	; 0x02
     e8c:	93 81       	ldd	r25, Z+3	; 0x03
     e8e:	20 e0       	ldi	r18, 0x00	; 0
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	4a e7       	ldi	r20, 0x7A	; 122
     e94:	53 e4       	ldi	r21, 0x43	; 67
     e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	f8 01       	movw	r30, r16
     ea0:	80 83       	st	Z, r24
     ea2:	91 83       	std	Z+1, r25	; 0x01
     ea4:	a2 83       	std	Z+2, r26	; 0x02
     ea6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ea8:	fe 01       	movw	r30, r28
     eaa:	e3 5b       	subi	r30, 0xB3	; 179
     eac:	ff 4f       	sbci	r31, 0xFF	; 255
     eae:	60 81       	ld	r22, Z
     eb0:	71 81       	ldd	r23, Z+1	; 0x01
     eb2:	82 81       	ldd	r24, Z+2	; 0x02
     eb4:	93 81       	ldd	r25, Z+3	; 0x03
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	40 e8       	ldi	r20, 0x80	; 128
     ebc:	5f e3       	ldi	r21, 0x3F	; 63
     ebe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ec2:	88 23       	and	r24, r24
     ec4:	44 f4       	brge	.+16     	; 0xed6 <LCD_sendCommand+0x222>
		__ticks = 1;
     ec6:	fe 01       	movw	r30, r28
     ec8:	e5 5b       	subi	r30, 0xB5	; 181
     eca:	ff 4f       	sbci	r31, 0xFF	; 255
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	91 83       	std	Z+1, r25	; 0x01
     ed2:	80 83       	st	Z, r24
     ed4:	64 c0       	rjmp	.+200    	; 0xf9e <LCD_sendCommand+0x2ea>
	else if (__tmp > 65535)
     ed6:	fe 01       	movw	r30, r28
     ed8:	e3 5b       	subi	r30, 0xB3	; 179
     eda:	ff 4f       	sbci	r31, 0xFF	; 255
     edc:	60 81       	ld	r22, Z
     ede:	71 81       	ldd	r23, Z+1	; 0x01
     ee0:	82 81       	ldd	r24, Z+2	; 0x02
     ee2:	93 81       	ldd	r25, Z+3	; 0x03
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	3f ef       	ldi	r19, 0xFF	; 255
     ee8:	4f e7       	ldi	r20, 0x7F	; 127
     eea:	57 e4       	ldi	r21, 0x47	; 71
     eec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ef0:	18 16       	cp	r1, r24
     ef2:	0c f0       	brlt	.+2      	; 0xef6 <LCD_sendCommand+0x242>
     ef4:	43 c0       	rjmp	.+134    	; 0xf7c <LCD_sendCommand+0x2c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ef6:	fe 01       	movw	r30, r28
     ef8:	ef 5a       	subi	r30, 0xAF	; 175
     efa:	ff 4f       	sbci	r31, 0xFF	; 255
     efc:	60 81       	ld	r22, Z
     efe:	71 81       	ldd	r23, Z+1	; 0x01
     f00:	82 81       	ldd	r24, Z+2	; 0x02
     f02:	93 81       	ldd	r25, Z+3	; 0x03
     f04:	20 e0       	ldi	r18, 0x00	; 0
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	40 e2       	ldi	r20, 0x20	; 32
     f0a:	51 e4       	ldi	r21, 0x41	; 65
     f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f10:	dc 01       	movw	r26, r24
     f12:	cb 01       	movw	r24, r22
     f14:	8e 01       	movw	r16, r28
     f16:	05 5b       	subi	r16, 0xB5	; 181
     f18:	1f 4f       	sbci	r17, 0xFF	; 255
     f1a:	bc 01       	movw	r22, r24
     f1c:	cd 01       	movw	r24, r26
     f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f22:	dc 01       	movw	r26, r24
     f24:	cb 01       	movw	r24, r22
     f26:	f8 01       	movw	r30, r16
     f28:	91 83       	std	Z+1, r25	; 0x01
     f2a:	80 83       	st	Z, r24
     f2c:	1f c0       	rjmp	.+62     	; 0xf6c <LCD_sendCommand+0x2b8>
     f2e:	fe 01       	movw	r30, r28
     f30:	e7 5b       	subi	r30, 0xB7	; 183
     f32:	ff 4f       	sbci	r31, 0xFF	; 255
     f34:	89 e1       	ldi	r24, 0x19	; 25
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	91 83       	std	Z+1, r25	; 0x01
     f3a:	80 83       	st	Z, r24
     f3c:	fe 01       	movw	r30, r28
     f3e:	e7 5b       	subi	r30, 0xB7	; 183
     f40:	ff 4f       	sbci	r31, 0xFF	; 255
     f42:	80 81       	ld	r24, Z
     f44:	91 81       	ldd	r25, Z+1	; 0x01
     f46:	01 97       	sbiw	r24, 0x01	; 1
     f48:	f1 f7       	brne	.-4      	; 0xf46 <LCD_sendCommand+0x292>
     f4a:	fe 01       	movw	r30, r28
     f4c:	e7 5b       	subi	r30, 0xB7	; 183
     f4e:	ff 4f       	sbci	r31, 0xFF	; 255
     f50:	91 83       	std	Z+1, r25	; 0x01
     f52:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f54:	de 01       	movw	r26, r28
     f56:	a5 5b       	subi	r26, 0xB5	; 181
     f58:	bf 4f       	sbci	r27, 0xFF	; 255
     f5a:	fe 01       	movw	r30, r28
     f5c:	e5 5b       	subi	r30, 0xB5	; 181
     f5e:	ff 4f       	sbci	r31, 0xFF	; 255
     f60:	80 81       	ld	r24, Z
     f62:	91 81       	ldd	r25, Z+1	; 0x01
     f64:	01 97       	sbiw	r24, 0x01	; 1
     f66:	11 96       	adiw	r26, 0x01	; 1
     f68:	9c 93       	st	X, r25
     f6a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f6c:	fe 01       	movw	r30, r28
     f6e:	e5 5b       	subi	r30, 0xB5	; 181
     f70:	ff 4f       	sbci	r31, 0xFF	; 255
     f72:	80 81       	ld	r24, Z
     f74:	91 81       	ldd	r25, Z+1	; 0x01
     f76:	00 97       	sbiw	r24, 0x00	; 0
     f78:	d1 f6       	brne	.-76     	; 0xf2e <LCD_sendCommand+0x27a>
     f7a:	27 c0       	rjmp	.+78     	; 0xfca <LCD_sendCommand+0x316>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f7c:	8e 01       	movw	r16, r28
     f7e:	05 5b       	subi	r16, 0xB5	; 181
     f80:	1f 4f       	sbci	r17, 0xFF	; 255
     f82:	fe 01       	movw	r30, r28
     f84:	e3 5b       	subi	r30, 0xB3	; 179
     f86:	ff 4f       	sbci	r31, 0xFF	; 255
     f88:	60 81       	ld	r22, Z
     f8a:	71 81       	ldd	r23, Z+1	; 0x01
     f8c:	82 81       	ldd	r24, Z+2	; 0x02
     f8e:	93 81       	ldd	r25, Z+3	; 0x03
     f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f94:	dc 01       	movw	r26, r24
     f96:	cb 01       	movw	r24, r22
     f98:	f8 01       	movw	r30, r16
     f9a:	91 83       	std	Z+1, r25	; 0x01
     f9c:	80 83       	st	Z, r24
     f9e:	de 01       	movw	r26, r28
     fa0:	a9 5b       	subi	r26, 0xB9	; 185
     fa2:	bf 4f       	sbci	r27, 0xFF	; 255
     fa4:	fe 01       	movw	r30, r28
     fa6:	e5 5b       	subi	r30, 0xB5	; 181
     fa8:	ff 4f       	sbci	r31, 0xFF	; 255
     faa:	80 81       	ld	r24, Z
     fac:	91 81       	ldd	r25, Z+1	; 0x01
     fae:	8d 93       	st	X+, r24
     fb0:	9c 93       	st	X, r25
     fb2:	fe 01       	movw	r30, r28
     fb4:	e9 5b       	subi	r30, 0xB9	; 185
     fb6:	ff 4f       	sbci	r31, 0xFF	; 255
     fb8:	80 81       	ld	r24, Z
     fba:	91 81       	ldd	r25, Z+1	; 0x01
     fbc:	01 97       	sbiw	r24, 0x01	; 1
     fbe:	f1 f7       	brne	.-4      	; 0xfbc <LCD_sendCommand+0x308>
     fc0:	fe 01       	movw	r30, r28
     fc2:	e9 5b       	subi	r30, 0xB9	; 185
     fc4:	ff 4f       	sbci	r31, 0xFF	; 255
     fc6:	91 83       	std	Z+1, r25	; 0x01
     fc8:	80 83       	st	Z, r24
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
     fca:	ab e3       	ldi	r26, 0x3B	; 59
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	eb e3       	ldi	r30, 0x3B	; 59
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	98 2f       	mov	r25, r24
     fd6:	90 7f       	andi	r25, 0xF0	; 240
     fd8:	fe 01       	movw	r30, r28
     fda:	ed 59       	subi	r30, 0x9D	; 157
     fdc:	ff 4f       	sbci	r31, 0xFF	; 255
     fde:	80 81       	ld	r24, Z
     fe0:	82 95       	swap	r24
     fe2:	8f 70       	andi	r24, 0x0F	; 15
     fe4:	89 2b       	or	r24, r25
     fe6:	8c 93       	st	X, r24
     fe8:	fe 01       	movw	r30, r28
     fea:	ed 5b       	subi	r30, 0xBD	; 189
     fec:	ff 4f       	sbci	r31, 0xFF	; 255
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	a0 e8       	ldi	r26, 0x80	; 128
     ff4:	bf e3       	ldi	r27, 0x3F	; 63
     ff6:	80 83       	st	Z, r24
     ff8:	91 83       	std	Z+1, r25	; 0x01
     ffa:	a2 83       	std	Z+2, r26	; 0x02
     ffc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ffe:	8e 01       	movw	r16, r28
    1000:	01 5c       	subi	r16, 0xC1	; 193
    1002:	1f 4f       	sbci	r17, 0xFF	; 255
    1004:	fe 01       	movw	r30, r28
    1006:	ed 5b       	subi	r30, 0xBD	; 189
    1008:	ff 4f       	sbci	r31, 0xFF	; 255
    100a:	60 81       	ld	r22, Z
    100c:	71 81       	ldd	r23, Z+1	; 0x01
    100e:	82 81       	ldd	r24, Z+2	; 0x02
    1010:	93 81       	ldd	r25, Z+3	; 0x03
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	4a e7       	ldi	r20, 0x7A	; 122
    1018:	53 e4       	ldi	r21, 0x43	; 67
    101a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    101e:	dc 01       	movw	r26, r24
    1020:	cb 01       	movw	r24, r22
    1022:	f8 01       	movw	r30, r16
    1024:	80 83       	st	Z, r24
    1026:	91 83       	std	Z+1, r25	; 0x01
    1028:	a2 83       	std	Z+2, r26	; 0x02
    102a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    102c:	fe 01       	movw	r30, r28
    102e:	ff 96       	adiw	r30, 0x3f	; 63
    1030:	60 81       	ld	r22, Z
    1032:	71 81       	ldd	r23, Z+1	; 0x01
    1034:	82 81       	ldd	r24, Z+2	; 0x02
    1036:	93 81       	ldd	r25, Z+3	; 0x03
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	40 e8       	ldi	r20, 0x80	; 128
    103e:	5f e3       	ldi	r21, 0x3F	; 63
    1040:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1044:	88 23       	and	r24, r24
    1046:	2c f4       	brge	.+10     	; 0x1052 <LCD_sendCommand+0x39e>
		__ticks = 1;
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	9e af       	std	Y+62, r25	; 0x3e
    104e:	8d af       	std	Y+61, r24	; 0x3d
    1050:	46 c0       	rjmp	.+140    	; 0x10de <LCD_sendCommand+0x42a>
	else if (__tmp > 65535)
    1052:	fe 01       	movw	r30, r28
    1054:	ff 96       	adiw	r30, 0x3f	; 63
    1056:	60 81       	ld	r22, Z
    1058:	71 81       	ldd	r23, Z+1	; 0x01
    105a:	82 81       	ldd	r24, Z+2	; 0x02
    105c:	93 81       	ldd	r25, Z+3	; 0x03
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	3f ef       	ldi	r19, 0xFF	; 255
    1062:	4f e7       	ldi	r20, 0x7F	; 127
    1064:	57 e4       	ldi	r21, 0x47	; 71
    1066:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    106a:	18 16       	cp	r1, r24
    106c:	64 f5       	brge	.+88     	; 0x10c6 <LCD_sendCommand+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    106e:	fe 01       	movw	r30, r28
    1070:	ed 5b       	subi	r30, 0xBD	; 189
    1072:	ff 4f       	sbci	r31, 0xFF	; 255
    1074:	60 81       	ld	r22, Z
    1076:	71 81       	ldd	r23, Z+1	; 0x01
    1078:	82 81       	ldd	r24, Z+2	; 0x02
    107a:	93 81       	ldd	r25, Z+3	; 0x03
    107c:	20 e0       	ldi	r18, 0x00	; 0
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	40 e2       	ldi	r20, 0x20	; 32
    1082:	51 e4       	ldi	r21, 0x41	; 65
    1084:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1088:	dc 01       	movw	r26, r24
    108a:	cb 01       	movw	r24, r22
    108c:	bc 01       	movw	r22, r24
    108e:	cd 01       	movw	r24, r26
    1090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1094:	dc 01       	movw	r26, r24
    1096:	cb 01       	movw	r24, r22
    1098:	9e af       	std	Y+62, r25	; 0x3e
    109a:	8d af       	std	Y+61, r24	; 0x3d
    109c:	0f c0       	rjmp	.+30     	; 0x10bc <LCD_sendCommand+0x408>
    109e:	89 e1       	ldi	r24, 0x19	; 25
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	9c af       	std	Y+60, r25	; 0x3c
    10a4:	8b af       	std	Y+59, r24	; 0x3b
    10a6:	8b ad       	ldd	r24, Y+59	; 0x3b
    10a8:	9c ad       	ldd	r25, Y+60	; 0x3c
    10aa:	01 97       	sbiw	r24, 0x01	; 1
    10ac:	f1 f7       	brne	.-4      	; 0x10aa <LCD_sendCommand+0x3f6>
    10ae:	9c af       	std	Y+60, r25	; 0x3c
    10b0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10b2:	8d ad       	ldd	r24, Y+61	; 0x3d
    10b4:	9e ad       	ldd	r25, Y+62	; 0x3e
    10b6:	01 97       	sbiw	r24, 0x01	; 1
    10b8:	9e af       	std	Y+62, r25	; 0x3e
    10ba:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    10be:	9e ad       	ldd	r25, Y+62	; 0x3e
    10c0:	00 97       	sbiw	r24, 0x00	; 0
    10c2:	69 f7       	brne	.-38     	; 0x109e <LCD_sendCommand+0x3ea>
    10c4:	16 c0       	rjmp	.+44     	; 0x10f2 <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10c6:	fe 01       	movw	r30, r28
    10c8:	ff 96       	adiw	r30, 0x3f	; 63
    10ca:	60 81       	ld	r22, Z
    10cc:	71 81       	ldd	r23, Z+1	; 0x01
    10ce:	82 81       	ldd	r24, Z+2	; 0x02
    10d0:	93 81       	ldd	r25, Z+3	; 0x03
    10d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10d6:	dc 01       	movw	r26, r24
    10d8:	cb 01       	movw	r24, r22
    10da:	9e af       	std	Y+62, r25	; 0x3e
    10dc:	8d af       	std	Y+61, r24	; 0x3d
    10de:	8d ad       	ldd	r24, Y+61	; 0x3d
    10e0:	9e ad       	ldd	r25, Y+62	; 0x3e
    10e2:	9a af       	std	Y+58, r25	; 0x3a
    10e4:	89 af       	std	Y+57, r24	; 0x39
    10e6:	89 ad       	ldd	r24, Y+57	; 0x39
    10e8:	9a ad       	ldd	r25, Y+58	; 0x3a
    10ea:	01 97       	sbiw	r24, 0x01	; 1
    10ec:	f1 f7       	brne	.-4      	; 0x10ea <LCD_sendCommand+0x436>
    10ee:	9a af       	std	Y+58, r25	; 0x3a
    10f0:	89 af       	std	Y+57, r24	; 0x39
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    10f2:	ab e3       	ldi	r26, 0x3B	; 59
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	eb e3       	ldi	r30, 0x3B	; 59
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	8f 7d       	andi	r24, 0xDF	; 223
    10fe:	8c 93       	st	X, r24
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	a0 e8       	ldi	r26, 0x80	; 128
    1106:	bf e3       	ldi	r27, 0x3F	; 63
    1108:	8d ab       	std	Y+53, r24	; 0x35
    110a:	9e ab       	std	Y+54, r25	; 0x36
    110c:	af ab       	std	Y+55, r26	; 0x37
    110e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1110:	6d a9       	ldd	r22, Y+53	; 0x35
    1112:	7e a9       	ldd	r23, Y+54	; 0x36
    1114:	8f a9       	ldd	r24, Y+55	; 0x37
    1116:	98 ad       	ldd	r25, Y+56	; 0x38
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	4a e7       	ldi	r20, 0x7A	; 122
    111e:	53 e4       	ldi	r21, 0x43	; 67
    1120:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1124:	dc 01       	movw	r26, r24
    1126:	cb 01       	movw	r24, r22
    1128:	89 ab       	std	Y+49, r24	; 0x31
    112a:	9a ab       	std	Y+50, r25	; 0x32
    112c:	ab ab       	std	Y+51, r26	; 0x33
    112e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1130:	69 a9       	ldd	r22, Y+49	; 0x31
    1132:	7a a9       	ldd	r23, Y+50	; 0x32
    1134:	8b a9       	ldd	r24, Y+51	; 0x33
    1136:	9c a9       	ldd	r25, Y+52	; 0x34
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	40 e8       	ldi	r20, 0x80	; 128
    113e:	5f e3       	ldi	r21, 0x3F	; 63
    1140:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1144:	88 23       	and	r24, r24
    1146:	2c f4       	brge	.+10     	; 0x1152 <LCD_sendCommand+0x49e>
		__ticks = 1;
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	98 ab       	std	Y+48, r25	; 0x30
    114e:	8f a7       	std	Y+47, r24	; 0x2f
    1150:	3f c0       	rjmp	.+126    	; 0x11d0 <LCD_sendCommand+0x51c>
	else if (__tmp > 65535)
    1152:	69 a9       	ldd	r22, Y+49	; 0x31
    1154:	7a a9       	ldd	r23, Y+50	; 0x32
    1156:	8b a9       	ldd	r24, Y+51	; 0x33
    1158:	9c a9       	ldd	r25, Y+52	; 0x34
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	3f ef       	ldi	r19, 0xFF	; 255
    115e:	4f e7       	ldi	r20, 0x7F	; 127
    1160:	57 e4       	ldi	r21, 0x47	; 71
    1162:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1166:	18 16       	cp	r1, r24
    1168:	4c f5       	brge	.+82     	; 0x11bc <LCD_sendCommand+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    116a:	6d a9       	ldd	r22, Y+53	; 0x35
    116c:	7e a9       	ldd	r23, Y+54	; 0x36
    116e:	8f a9       	ldd	r24, Y+55	; 0x37
    1170:	98 ad       	ldd	r25, Y+56	; 0x38
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	40 e2       	ldi	r20, 0x20	; 32
    1178:	51 e4       	ldi	r21, 0x41	; 65
    117a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    117e:	dc 01       	movw	r26, r24
    1180:	cb 01       	movw	r24, r22
    1182:	bc 01       	movw	r22, r24
    1184:	cd 01       	movw	r24, r26
    1186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    118a:	dc 01       	movw	r26, r24
    118c:	cb 01       	movw	r24, r22
    118e:	98 ab       	std	Y+48, r25	; 0x30
    1190:	8f a7       	std	Y+47, r24	; 0x2f
    1192:	0f c0       	rjmp	.+30     	; 0x11b2 <LCD_sendCommand+0x4fe>
    1194:	89 e1       	ldi	r24, 0x19	; 25
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	9e a7       	std	Y+46, r25	; 0x2e
    119a:	8d a7       	std	Y+45, r24	; 0x2d
    119c:	8d a5       	ldd	r24, Y+45	; 0x2d
    119e:	9e a5       	ldd	r25, Y+46	; 0x2e
    11a0:	01 97       	sbiw	r24, 0x01	; 1
    11a2:	f1 f7       	brne	.-4      	; 0x11a0 <LCD_sendCommand+0x4ec>
    11a4:	9e a7       	std	Y+46, r25	; 0x2e
    11a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    11aa:	98 a9       	ldd	r25, Y+48	; 0x30
    11ac:	01 97       	sbiw	r24, 0x01	; 1
    11ae:	98 ab       	std	Y+48, r25	; 0x30
    11b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    11b4:	98 a9       	ldd	r25, Y+48	; 0x30
    11b6:	00 97       	sbiw	r24, 0x00	; 0
    11b8:	69 f7       	brne	.-38     	; 0x1194 <LCD_sendCommand+0x4e0>
    11ba:	14 c0       	rjmp	.+40     	; 0x11e4 <LCD_sendCommand+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11bc:	69 a9       	ldd	r22, Y+49	; 0x31
    11be:	7a a9       	ldd	r23, Y+50	; 0x32
    11c0:	8b a9       	ldd	r24, Y+51	; 0x33
    11c2:	9c a9       	ldd	r25, Y+52	; 0x34
    11c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	98 ab       	std	Y+48, r25	; 0x30
    11ce:	8f a7       	std	Y+47, r24	; 0x2f
    11d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    11d2:	98 a9       	ldd	r25, Y+48	; 0x30
    11d4:	9c a7       	std	Y+44, r25	; 0x2c
    11d6:	8b a7       	std	Y+43, r24	; 0x2b
    11d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    11da:	9c a5       	ldd	r25, Y+44	; 0x2c
    11dc:	01 97       	sbiw	r24, 0x01	; 1
    11de:	f1 f7       	brne	.-4      	; 0x11dc <LCD_sendCommand+0x528>
    11e0:	9c a7       	std	Y+44, r25	; 0x2c
    11e2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    11e4:	ab e3       	ldi	r26, 0x3B	; 59
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	eb e3       	ldi	r30, 0x3B	; 59
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	80 62       	ori	r24, 0x20	; 32
    11f0:	8c 93       	st	X, r24
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	a0 e8       	ldi	r26, 0x80	; 128
    11f8:	bf e3       	ldi	r27, 0x3F	; 63
    11fa:	8f a3       	std	Y+39, r24	; 0x27
    11fc:	98 a7       	std	Y+40, r25	; 0x28
    11fe:	a9 a7       	std	Y+41, r26	; 0x29
    1200:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1202:	6f a1       	ldd	r22, Y+39	; 0x27
    1204:	78 a5       	ldd	r23, Y+40	; 0x28
    1206:	89 a5       	ldd	r24, Y+41	; 0x29
    1208:	9a a5       	ldd	r25, Y+42	; 0x2a
    120a:	20 e0       	ldi	r18, 0x00	; 0
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	4a e7       	ldi	r20, 0x7A	; 122
    1210:	53 e4       	ldi	r21, 0x43	; 67
    1212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1216:	dc 01       	movw	r26, r24
    1218:	cb 01       	movw	r24, r22
    121a:	8b a3       	std	Y+35, r24	; 0x23
    121c:	9c a3       	std	Y+36, r25	; 0x24
    121e:	ad a3       	std	Y+37, r26	; 0x25
    1220:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1222:	6b a1       	ldd	r22, Y+35	; 0x23
    1224:	7c a1       	ldd	r23, Y+36	; 0x24
    1226:	8d a1       	ldd	r24, Y+37	; 0x25
    1228:	9e a1       	ldd	r25, Y+38	; 0x26
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	40 e8       	ldi	r20, 0x80	; 128
    1230:	5f e3       	ldi	r21, 0x3F	; 63
    1232:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1236:	88 23       	and	r24, r24
    1238:	2c f4       	brge	.+10     	; 0x1244 <LCD_sendCommand+0x590>
		__ticks = 1;
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	9a a3       	std	Y+34, r25	; 0x22
    1240:	89 a3       	std	Y+33, r24	; 0x21
    1242:	3f c0       	rjmp	.+126    	; 0x12c2 <LCD_sendCommand+0x60e>
	else if (__tmp > 65535)
    1244:	6b a1       	ldd	r22, Y+35	; 0x23
    1246:	7c a1       	ldd	r23, Y+36	; 0x24
    1248:	8d a1       	ldd	r24, Y+37	; 0x25
    124a:	9e a1       	ldd	r25, Y+38	; 0x26
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	3f ef       	ldi	r19, 0xFF	; 255
    1250:	4f e7       	ldi	r20, 0x7F	; 127
    1252:	57 e4       	ldi	r21, 0x47	; 71
    1254:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1258:	18 16       	cp	r1, r24
    125a:	4c f5       	brge	.+82     	; 0x12ae <LCD_sendCommand+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    125c:	6f a1       	ldd	r22, Y+39	; 0x27
    125e:	78 a5       	ldd	r23, Y+40	; 0x28
    1260:	89 a5       	ldd	r24, Y+41	; 0x29
    1262:	9a a5       	ldd	r25, Y+42	; 0x2a
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	40 e2       	ldi	r20, 0x20	; 32
    126a:	51 e4       	ldi	r21, 0x41	; 65
    126c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	bc 01       	movw	r22, r24
    1276:	cd 01       	movw	r24, r26
    1278:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    127c:	dc 01       	movw	r26, r24
    127e:	cb 01       	movw	r24, r22
    1280:	9a a3       	std	Y+34, r25	; 0x22
    1282:	89 a3       	std	Y+33, r24	; 0x21
    1284:	0f c0       	rjmp	.+30     	; 0x12a4 <LCD_sendCommand+0x5f0>
    1286:	89 e1       	ldi	r24, 0x19	; 25
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	98 a3       	std	Y+32, r25	; 0x20
    128c:	8f 8f       	std	Y+31, r24	; 0x1f
    128e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1290:	98 a1       	ldd	r25, Y+32	; 0x20
    1292:	01 97       	sbiw	r24, 0x01	; 1
    1294:	f1 f7       	brne	.-4      	; 0x1292 <LCD_sendCommand+0x5de>
    1296:	98 a3       	std	Y+32, r25	; 0x20
    1298:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    129a:	89 a1       	ldd	r24, Y+33	; 0x21
    129c:	9a a1       	ldd	r25, Y+34	; 0x22
    129e:	01 97       	sbiw	r24, 0x01	; 1
    12a0:	9a a3       	std	Y+34, r25	; 0x22
    12a2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12a4:	89 a1       	ldd	r24, Y+33	; 0x21
    12a6:	9a a1       	ldd	r25, Y+34	; 0x22
    12a8:	00 97       	sbiw	r24, 0x00	; 0
    12aa:	69 f7       	brne	.-38     	; 0x1286 <LCD_sendCommand+0x5d2>
    12ac:	14 c0       	rjmp	.+40     	; 0x12d6 <LCD_sendCommand+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ae:	6b a1       	ldd	r22, Y+35	; 0x23
    12b0:	7c a1       	ldd	r23, Y+36	; 0x24
    12b2:	8d a1       	ldd	r24, Y+37	; 0x25
    12b4:	9e a1       	ldd	r25, Y+38	; 0x26
    12b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ba:	dc 01       	movw	r26, r24
    12bc:	cb 01       	movw	r24, r22
    12be:	9a a3       	std	Y+34, r25	; 0x22
    12c0:	89 a3       	std	Y+33, r24	; 0x21
    12c2:	89 a1       	ldd	r24, Y+33	; 0x21
    12c4:	9a a1       	ldd	r25, Y+34	; 0x22
    12c6:	9e 8f       	std	Y+30, r25	; 0x1e
    12c8:	8d 8f       	std	Y+29, r24	; 0x1d
    12ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12ce:	01 97       	sbiw	r24, 0x01	; 1
    12d0:	f1 f7       	brne	.-4      	; 0x12ce <LCD_sendCommand+0x61a>
    12d2:	9e 8f       	std	Y+30, r25	; 0x1e
    12d4:	8d 8f       	std	Y+29, r24	; 0x1d

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
    12d6:	ab e3       	ldi	r26, 0x3B	; 59
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	eb e3       	ldi	r30, 0x3B	; 59
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	98 2f       	mov	r25, r24
    12e2:	90 7f       	andi	r25, 0xF0	; 240
    12e4:	fe 01       	movw	r30, r28
    12e6:	ed 59       	subi	r30, 0x9D	; 157
    12e8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ea:	80 81       	ld	r24, Z
    12ec:	8f 70       	andi	r24, 0x0F	; 15
    12ee:	89 2b       	or	r24, r25
    12f0:	8c 93       	st	X, r24
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	a0 e8       	ldi	r26, 0x80	; 128
    12f8:	bf e3       	ldi	r27, 0x3F	; 63
    12fa:	89 8f       	std	Y+25, r24	; 0x19
    12fc:	9a 8f       	std	Y+26, r25	; 0x1a
    12fe:	ab 8f       	std	Y+27, r26	; 0x1b
    1300:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1302:	69 8d       	ldd	r22, Y+25	; 0x19
    1304:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1306:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1308:	9c 8d       	ldd	r25, Y+28	; 0x1c
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	4a e7       	ldi	r20, 0x7A	; 122
    1310:	53 e4       	ldi	r21, 0x43	; 67
    1312:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1316:	dc 01       	movw	r26, r24
    1318:	cb 01       	movw	r24, r22
    131a:	8d 8b       	std	Y+21, r24	; 0x15
    131c:	9e 8b       	std	Y+22, r25	; 0x16
    131e:	af 8b       	std	Y+23, r26	; 0x17
    1320:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1322:	6d 89       	ldd	r22, Y+21	; 0x15
    1324:	7e 89       	ldd	r23, Y+22	; 0x16
    1326:	8f 89       	ldd	r24, Y+23	; 0x17
    1328:	98 8d       	ldd	r25, Y+24	; 0x18
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	40 e8       	ldi	r20, 0x80	; 128
    1330:	5f e3       	ldi	r21, 0x3F	; 63
    1332:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1336:	88 23       	and	r24, r24
    1338:	2c f4       	brge	.+10     	; 0x1344 <LCD_sendCommand+0x690>
		__ticks = 1;
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	9c 8b       	std	Y+20, r25	; 0x14
    1340:	8b 8b       	std	Y+19, r24	; 0x13
    1342:	3f c0       	rjmp	.+126    	; 0x13c2 <LCD_sendCommand+0x70e>
	else if (__tmp > 65535)
    1344:	6d 89       	ldd	r22, Y+21	; 0x15
    1346:	7e 89       	ldd	r23, Y+22	; 0x16
    1348:	8f 89       	ldd	r24, Y+23	; 0x17
    134a:	98 8d       	ldd	r25, Y+24	; 0x18
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	3f ef       	ldi	r19, 0xFF	; 255
    1350:	4f e7       	ldi	r20, 0x7F	; 127
    1352:	57 e4       	ldi	r21, 0x47	; 71
    1354:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1358:	18 16       	cp	r1, r24
    135a:	4c f5       	brge	.+82     	; 0x13ae <LCD_sendCommand+0x6fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    135c:	69 8d       	ldd	r22, Y+25	; 0x19
    135e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1360:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1362:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	40 e2       	ldi	r20, 0x20	; 32
    136a:	51 e4       	ldi	r21, 0x41	; 65
    136c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1370:	dc 01       	movw	r26, r24
    1372:	cb 01       	movw	r24, r22
    1374:	bc 01       	movw	r22, r24
    1376:	cd 01       	movw	r24, r26
    1378:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    137c:	dc 01       	movw	r26, r24
    137e:	cb 01       	movw	r24, r22
    1380:	9c 8b       	std	Y+20, r25	; 0x14
    1382:	8b 8b       	std	Y+19, r24	; 0x13
    1384:	0f c0       	rjmp	.+30     	; 0x13a4 <LCD_sendCommand+0x6f0>
    1386:	89 e1       	ldi	r24, 0x19	; 25
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	9a 8b       	std	Y+18, r25	; 0x12
    138c:	89 8b       	std	Y+17, r24	; 0x11
    138e:	89 89       	ldd	r24, Y+17	; 0x11
    1390:	9a 89       	ldd	r25, Y+18	; 0x12
    1392:	01 97       	sbiw	r24, 0x01	; 1
    1394:	f1 f7       	brne	.-4      	; 0x1392 <LCD_sendCommand+0x6de>
    1396:	9a 8b       	std	Y+18, r25	; 0x12
    1398:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    139a:	8b 89       	ldd	r24, Y+19	; 0x13
    139c:	9c 89       	ldd	r25, Y+20	; 0x14
    139e:	01 97       	sbiw	r24, 0x01	; 1
    13a0:	9c 8b       	std	Y+20, r25	; 0x14
    13a2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13a4:	8b 89       	ldd	r24, Y+19	; 0x13
    13a6:	9c 89       	ldd	r25, Y+20	; 0x14
    13a8:	00 97       	sbiw	r24, 0x00	; 0
    13aa:	69 f7       	brne	.-38     	; 0x1386 <LCD_sendCommand+0x6d2>
    13ac:	14 c0       	rjmp	.+40     	; 0x13d6 <LCD_sendCommand+0x722>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ae:	6d 89       	ldd	r22, Y+21	; 0x15
    13b0:	7e 89       	ldd	r23, Y+22	; 0x16
    13b2:	8f 89       	ldd	r24, Y+23	; 0x17
    13b4:	98 8d       	ldd	r25, Y+24	; 0x18
    13b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ba:	dc 01       	movw	r26, r24
    13bc:	cb 01       	movw	r24, r22
    13be:	9c 8b       	std	Y+20, r25	; 0x14
    13c0:	8b 8b       	std	Y+19, r24	; 0x13
    13c2:	8b 89       	ldd	r24, Y+19	; 0x13
    13c4:	9c 89       	ldd	r25, Y+20	; 0x14
    13c6:	98 8b       	std	Y+16, r25	; 0x10
    13c8:	8f 87       	std	Y+15, r24	; 0x0f
    13ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    13cc:	98 89       	ldd	r25, Y+16	; 0x10
    13ce:	01 97       	sbiw	r24, 0x01	; 1
    13d0:	f1 f7       	brne	.-4      	; 0x13ce <LCD_sendCommand+0x71a>
    13d2:	98 8b       	std	Y+16, r25	; 0x10
    13d4:	8f 87       	std	Y+15, r24	; 0x0f
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    13d6:	ab e3       	ldi	r26, 0x3B	; 59
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	eb e3       	ldi	r30, 0x3B	; 59
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	8f 7d       	andi	r24, 0xDF	; 223
    13e2:	8c 93       	st	X, r24
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	a0 e8       	ldi	r26, 0x80	; 128
    13ea:	bf e3       	ldi	r27, 0x3F	; 63
    13ec:	8b 87       	std	Y+11, r24	; 0x0b
    13ee:	9c 87       	std	Y+12, r25	; 0x0c
    13f0:	ad 87       	std	Y+13, r26	; 0x0d
    13f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    13f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    13f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    13fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	4a e7       	ldi	r20, 0x7A	; 122
    1402:	53 e4       	ldi	r21, 0x43	; 67
    1404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	8f 83       	std	Y+7, r24	; 0x07
    140e:	98 87       	std	Y+8, r25	; 0x08
    1410:	a9 87       	std	Y+9, r26	; 0x09
    1412:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1414:	6f 81       	ldd	r22, Y+7	; 0x07
    1416:	78 85       	ldd	r23, Y+8	; 0x08
    1418:	89 85       	ldd	r24, Y+9	; 0x09
    141a:	9a 85       	ldd	r25, Y+10	; 0x0a
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	40 e8       	ldi	r20, 0x80	; 128
    1422:	5f e3       	ldi	r21, 0x3F	; 63
    1424:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1428:	88 23       	and	r24, r24
    142a:	2c f4       	brge	.+10     	; 0x1436 <LCD_sendCommand+0x782>
		__ticks = 1;
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	9e 83       	std	Y+6, r25	; 0x06
    1432:	8d 83       	std	Y+5, r24	; 0x05
    1434:	3f c0       	rjmp	.+126    	; 0x14b4 <LCD_sendCommand+0x800>
	else if (__tmp > 65535)
    1436:	6f 81       	ldd	r22, Y+7	; 0x07
    1438:	78 85       	ldd	r23, Y+8	; 0x08
    143a:	89 85       	ldd	r24, Y+9	; 0x09
    143c:	9a 85       	ldd	r25, Y+10	; 0x0a
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	3f ef       	ldi	r19, 0xFF	; 255
    1442:	4f e7       	ldi	r20, 0x7F	; 127
    1444:	57 e4       	ldi	r21, 0x47	; 71
    1446:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    144a:	18 16       	cp	r1, r24
    144c:	4c f5       	brge	.+82     	; 0x14a0 <LCD_sendCommand+0x7ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    144e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1450:	7c 85       	ldd	r23, Y+12	; 0x0c
    1452:	8d 85       	ldd	r24, Y+13	; 0x0d
    1454:	9e 85       	ldd	r25, Y+14	; 0x0e
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	40 e2       	ldi	r20, 0x20	; 32
    145c:	51 e4       	ldi	r21, 0x41	; 65
    145e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	bc 01       	movw	r22, r24
    1468:	cd 01       	movw	r24, r26
    146a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	9e 83       	std	Y+6, r25	; 0x06
    1474:	8d 83       	std	Y+5, r24	; 0x05
    1476:	0f c0       	rjmp	.+30     	; 0x1496 <LCD_sendCommand+0x7e2>
    1478:	89 e1       	ldi	r24, 0x19	; 25
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	9c 83       	std	Y+4, r25	; 0x04
    147e:	8b 83       	std	Y+3, r24	; 0x03
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	9c 81       	ldd	r25, Y+4	; 0x04
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	f1 f7       	brne	.-4      	; 0x1484 <LCD_sendCommand+0x7d0>
    1488:	9c 83       	std	Y+4, r25	; 0x04
    148a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    148c:	8d 81       	ldd	r24, Y+5	; 0x05
    148e:	9e 81       	ldd	r25, Y+6	; 0x06
    1490:	01 97       	sbiw	r24, 0x01	; 1
    1492:	9e 83       	std	Y+6, r25	; 0x06
    1494:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1496:	8d 81       	ldd	r24, Y+5	; 0x05
    1498:	9e 81       	ldd	r25, Y+6	; 0x06
    149a:	00 97       	sbiw	r24, 0x00	; 0
    149c:	69 f7       	brne	.-38     	; 0x1478 <LCD_sendCommand+0x7c4>
    149e:	14 c0       	rjmp	.+40     	; 0x14c8 <LCD_sendCommand+0x814>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14a0:	6f 81       	ldd	r22, Y+7	; 0x07
    14a2:	78 85       	ldd	r23, Y+8	; 0x08
    14a4:	89 85       	ldd	r24, Y+9	; 0x09
    14a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	9e 83       	std	Y+6, r25	; 0x06
    14b2:	8d 83       	std	Y+5, r24	; 0x05
    14b4:	8d 81       	ldd	r24, Y+5	; 0x05
    14b6:	9e 81       	ldd	r25, Y+6	; 0x06
    14b8:	9a 83       	std	Y+2, r25	; 0x02
    14ba:	89 83       	std	Y+1, r24	; 0x01
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	9a 81       	ldd	r25, Y+2	; 0x02
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	f1 f7       	brne	.-4      	; 0x14c0 <LCD_sendCommand+0x80c>
    14c4:	9a 83       	std	Y+2, r25	; 0x02
    14c6:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    14c8:	cd 59       	subi	r28, 0x9D	; 157
    14ca:	df 4f       	sbci	r29, 0xFF	; 255
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	f8 94       	cli
    14d0:	de bf       	out	0x3e, r29	; 62
    14d2:	0f be       	out	0x3f, r0	; 63
    14d4:	cd bf       	out	0x3d, r28	; 61
    14d6:	cf 91       	pop	r28
    14d8:	df 91       	pop	r29
    14da:	1f 91       	pop	r17
    14dc:	0f 91       	pop	r16
    14de:	08 95       	ret

000014e0 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    14e0:	0f 93       	push	r16
    14e2:	1f 93       	push	r17
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	cd b7       	in	r28, 0x3d	; 61
    14ea:	de b7       	in	r29, 0x3e	; 62
    14ec:	c3 56       	subi	r28, 0x63	; 99
    14ee:	d0 40       	sbci	r29, 0x00	; 0
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	f8 94       	cli
    14f4:	de bf       	out	0x3e, r29	; 62
    14f6:	0f be       	out	0x3f, r0	; 63
    14f8:	cd bf       	out	0x3d, r28	; 61
    14fa:	fe 01       	movw	r30, r28
    14fc:	ed 59       	subi	r30, 0x9D	; 157
    14fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1500:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1502:	ab e3       	ldi	r26, 0x3B	; 59
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	eb e3       	ldi	r30, 0x3B	; 59
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	80 61       	ori	r24, 0x10	; 16
    150e:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1510:	ab e3       	ldi	r26, 0x3B	; 59
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	eb e3       	ldi	r30, 0x3B	; 59
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	8c 93       	st	X, r24
    151c:	fe 01       	movw	r30, r28
    151e:	e1 5a       	subi	r30, 0xA1	; 161
    1520:	ff 4f       	sbci	r31, 0xFF	; 255
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	a0 e8       	ldi	r26, 0x80	; 128
    1528:	bf e3       	ldi	r27, 0x3F	; 63
    152a:	80 83       	st	Z, r24
    152c:	91 83       	std	Z+1, r25	; 0x01
    152e:	a2 83       	std	Z+2, r26	; 0x02
    1530:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1532:	8e 01       	movw	r16, r28
    1534:	05 5a       	subi	r16, 0xA5	; 165
    1536:	1f 4f       	sbci	r17, 0xFF	; 255
    1538:	fe 01       	movw	r30, r28
    153a:	e1 5a       	subi	r30, 0xA1	; 161
    153c:	ff 4f       	sbci	r31, 0xFF	; 255
    153e:	60 81       	ld	r22, Z
    1540:	71 81       	ldd	r23, Z+1	; 0x01
    1542:	82 81       	ldd	r24, Z+2	; 0x02
    1544:	93 81       	ldd	r25, Z+3	; 0x03
    1546:	20 e0       	ldi	r18, 0x00	; 0
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	4a e7       	ldi	r20, 0x7A	; 122
    154c:	53 e4       	ldi	r21, 0x43	; 67
    154e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	f8 01       	movw	r30, r16
    1558:	80 83       	st	Z, r24
    155a:	91 83       	std	Z+1, r25	; 0x01
    155c:	a2 83       	std	Z+2, r26	; 0x02
    155e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1560:	fe 01       	movw	r30, r28
    1562:	e5 5a       	subi	r30, 0xA5	; 165
    1564:	ff 4f       	sbci	r31, 0xFF	; 255
    1566:	60 81       	ld	r22, Z
    1568:	71 81       	ldd	r23, Z+1	; 0x01
    156a:	82 81       	ldd	r24, Z+2	; 0x02
    156c:	93 81       	ldd	r25, Z+3	; 0x03
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	40 e8       	ldi	r20, 0x80	; 128
    1574:	5f e3       	ldi	r21, 0x3F	; 63
    1576:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    157a:	88 23       	and	r24, r24
    157c:	44 f4       	brge	.+16     	; 0x158e <LCD_displayCharacter+0xae>
		__ticks = 1;
    157e:	fe 01       	movw	r30, r28
    1580:	e7 5a       	subi	r30, 0xA7	; 167
    1582:	ff 4f       	sbci	r31, 0xFF	; 255
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	91 83       	std	Z+1, r25	; 0x01
    158a:	80 83       	st	Z, r24
    158c:	64 c0       	rjmp	.+200    	; 0x1656 <LCD_displayCharacter+0x176>
	else if (__tmp > 65535)
    158e:	fe 01       	movw	r30, r28
    1590:	e5 5a       	subi	r30, 0xA5	; 165
    1592:	ff 4f       	sbci	r31, 0xFF	; 255
    1594:	60 81       	ld	r22, Z
    1596:	71 81       	ldd	r23, Z+1	; 0x01
    1598:	82 81       	ldd	r24, Z+2	; 0x02
    159a:	93 81       	ldd	r25, Z+3	; 0x03
    159c:	20 e0       	ldi	r18, 0x00	; 0
    159e:	3f ef       	ldi	r19, 0xFF	; 255
    15a0:	4f e7       	ldi	r20, 0x7F	; 127
    15a2:	57 e4       	ldi	r21, 0x47	; 71
    15a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15a8:	18 16       	cp	r1, r24
    15aa:	0c f0       	brlt	.+2      	; 0x15ae <LCD_displayCharacter+0xce>
    15ac:	43 c0       	rjmp	.+134    	; 0x1634 <LCD_displayCharacter+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ae:	fe 01       	movw	r30, r28
    15b0:	e1 5a       	subi	r30, 0xA1	; 161
    15b2:	ff 4f       	sbci	r31, 0xFF	; 255
    15b4:	60 81       	ld	r22, Z
    15b6:	71 81       	ldd	r23, Z+1	; 0x01
    15b8:	82 81       	ldd	r24, Z+2	; 0x02
    15ba:	93 81       	ldd	r25, Z+3	; 0x03
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	40 e2       	ldi	r20, 0x20	; 32
    15c2:	51 e4       	ldi	r21, 0x41	; 65
    15c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c8:	dc 01       	movw	r26, r24
    15ca:	cb 01       	movw	r24, r22
    15cc:	8e 01       	movw	r16, r28
    15ce:	07 5a       	subi	r16, 0xA7	; 167
    15d0:	1f 4f       	sbci	r17, 0xFF	; 255
    15d2:	bc 01       	movw	r22, r24
    15d4:	cd 01       	movw	r24, r26
    15d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15da:	dc 01       	movw	r26, r24
    15dc:	cb 01       	movw	r24, r22
    15de:	f8 01       	movw	r30, r16
    15e0:	91 83       	std	Z+1, r25	; 0x01
    15e2:	80 83       	st	Z, r24
    15e4:	1f c0       	rjmp	.+62     	; 0x1624 <LCD_displayCharacter+0x144>
    15e6:	fe 01       	movw	r30, r28
    15e8:	e9 5a       	subi	r30, 0xA9	; 169
    15ea:	ff 4f       	sbci	r31, 0xFF	; 255
    15ec:	89 e1       	ldi	r24, 0x19	; 25
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	91 83       	std	Z+1, r25	; 0x01
    15f2:	80 83       	st	Z, r24
    15f4:	fe 01       	movw	r30, r28
    15f6:	e9 5a       	subi	r30, 0xA9	; 169
    15f8:	ff 4f       	sbci	r31, 0xFF	; 255
    15fa:	80 81       	ld	r24, Z
    15fc:	91 81       	ldd	r25, Z+1	; 0x01
    15fe:	01 97       	sbiw	r24, 0x01	; 1
    1600:	f1 f7       	brne	.-4      	; 0x15fe <LCD_displayCharacter+0x11e>
    1602:	fe 01       	movw	r30, r28
    1604:	e9 5a       	subi	r30, 0xA9	; 169
    1606:	ff 4f       	sbci	r31, 0xFF	; 255
    1608:	91 83       	std	Z+1, r25	; 0x01
    160a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    160c:	de 01       	movw	r26, r28
    160e:	a7 5a       	subi	r26, 0xA7	; 167
    1610:	bf 4f       	sbci	r27, 0xFF	; 255
    1612:	fe 01       	movw	r30, r28
    1614:	e7 5a       	subi	r30, 0xA7	; 167
    1616:	ff 4f       	sbci	r31, 0xFF	; 255
    1618:	80 81       	ld	r24, Z
    161a:	91 81       	ldd	r25, Z+1	; 0x01
    161c:	01 97       	sbiw	r24, 0x01	; 1
    161e:	11 96       	adiw	r26, 0x01	; 1
    1620:	9c 93       	st	X, r25
    1622:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1624:	fe 01       	movw	r30, r28
    1626:	e7 5a       	subi	r30, 0xA7	; 167
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
    162a:	80 81       	ld	r24, Z
    162c:	91 81       	ldd	r25, Z+1	; 0x01
    162e:	00 97       	sbiw	r24, 0x00	; 0
    1630:	d1 f6       	brne	.-76     	; 0x15e6 <LCD_displayCharacter+0x106>
    1632:	27 c0       	rjmp	.+78     	; 0x1682 <LCD_displayCharacter+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1634:	8e 01       	movw	r16, r28
    1636:	07 5a       	subi	r16, 0xA7	; 167
    1638:	1f 4f       	sbci	r17, 0xFF	; 255
    163a:	fe 01       	movw	r30, r28
    163c:	e5 5a       	subi	r30, 0xA5	; 165
    163e:	ff 4f       	sbci	r31, 0xFF	; 255
    1640:	60 81       	ld	r22, Z
    1642:	71 81       	ldd	r23, Z+1	; 0x01
    1644:	82 81       	ldd	r24, Z+2	; 0x02
    1646:	93 81       	ldd	r25, Z+3	; 0x03
    1648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    164c:	dc 01       	movw	r26, r24
    164e:	cb 01       	movw	r24, r22
    1650:	f8 01       	movw	r30, r16
    1652:	91 83       	std	Z+1, r25	; 0x01
    1654:	80 83       	st	Z, r24
    1656:	de 01       	movw	r26, r28
    1658:	ab 5a       	subi	r26, 0xAB	; 171
    165a:	bf 4f       	sbci	r27, 0xFF	; 255
    165c:	fe 01       	movw	r30, r28
    165e:	e7 5a       	subi	r30, 0xA7	; 167
    1660:	ff 4f       	sbci	r31, 0xFF	; 255
    1662:	80 81       	ld	r24, Z
    1664:	91 81       	ldd	r25, Z+1	; 0x01
    1666:	8d 93       	st	X+, r24
    1668:	9c 93       	st	X, r25
    166a:	fe 01       	movw	r30, r28
    166c:	eb 5a       	subi	r30, 0xAB	; 171
    166e:	ff 4f       	sbci	r31, 0xFF	; 255
    1670:	80 81       	ld	r24, Z
    1672:	91 81       	ldd	r25, Z+1	; 0x01
    1674:	01 97       	sbiw	r24, 0x01	; 1
    1676:	f1 f7       	brne	.-4      	; 0x1674 <LCD_displayCharacter+0x194>
    1678:	fe 01       	movw	r30, r28
    167a:	eb 5a       	subi	r30, 0xAB	; 171
    167c:	ff 4f       	sbci	r31, 0xFF	; 255
    167e:	91 83       	std	Z+1, r25	; 0x01
    1680:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1682:	ab e3       	ldi	r26, 0x3B	; 59
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	eb e3       	ldi	r30, 0x3B	; 59
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	80 62       	ori	r24, 0x20	; 32
    168e:	8c 93       	st	X, r24
    1690:	fe 01       	movw	r30, r28
    1692:	ef 5a       	subi	r30, 0xAF	; 175
    1694:	ff 4f       	sbci	r31, 0xFF	; 255
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	a0 e8       	ldi	r26, 0x80	; 128
    169c:	bf e3       	ldi	r27, 0x3F	; 63
    169e:	80 83       	st	Z, r24
    16a0:	91 83       	std	Z+1, r25	; 0x01
    16a2:	a2 83       	std	Z+2, r26	; 0x02
    16a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a6:	8e 01       	movw	r16, r28
    16a8:	03 5b       	subi	r16, 0xB3	; 179
    16aa:	1f 4f       	sbci	r17, 0xFF	; 255
    16ac:	fe 01       	movw	r30, r28
    16ae:	ef 5a       	subi	r30, 0xAF	; 175
    16b0:	ff 4f       	sbci	r31, 0xFF	; 255
    16b2:	60 81       	ld	r22, Z
    16b4:	71 81       	ldd	r23, Z+1	; 0x01
    16b6:	82 81       	ldd	r24, Z+2	; 0x02
    16b8:	93 81       	ldd	r25, Z+3	; 0x03
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	4a e7       	ldi	r20, 0x7A	; 122
    16c0:	53 e4       	ldi	r21, 0x43	; 67
    16c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c6:	dc 01       	movw	r26, r24
    16c8:	cb 01       	movw	r24, r22
    16ca:	f8 01       	movw	r30, r16
    16cc:	80 83       	st	Z, r24
    16ce:	91 83       	std	Z+1, r25	; 0x01
    16d0:	a2 83       	std	Z+2, r26	; 0x02
    16d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16d4:	fe 01       	movw	r30, r28
    16d6:	e3 5b       	subi	r30, 0xB3	; 179
    16d8:	ff 4f       	sbci	r31, 0xFF	; 255
    16da:	60 81       	ld	r22, Z
    16dc:	71 81       	ldd	r23, Z+1	; 0x01
    16de:	82 81       	ldd	r24, Z+2	; 0x02
    16e0:	93 81       	ldd	r25, Z+3	; 0x03
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	40 e8       	ldi	r20, 0x80	; 128
    16e8:	5f e3       	ldi	r21, 0x3F	; 63
    16ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16ee:	88 23       	and	r24, r24
    16f0:	44 f4       	brge	.+16     	; 0x1702 <LCD_displayCharacter+0x222>
		__ticks = 1;
    16f2:	fe 01       	movw	r30, r28
    16f4:	e5 5b       	subi	r30, 0xB5	; 181
    16f6:	ff 4f       	sbci	r31, 0xFF	; 255
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	91 83       	std	Z+1, r25	; 0x01
    16fe:	80 83       	st	Z, r24
    1700:	64 c0       	rjmp	.+200    	; 0x17ca <LCD_displayCharacter+0x2ea>
	else if (__tmp > 65535)
    1702:	fe 01       	movw	r30, r28
    1704:	e3 5b       	subi	r30, 0xB3	; 179
    1706:	ff 4f       	sbci	r31, 0xFF	; 255
    1708:	60 81       	ld	r22, Z
    170a:	71 81       	ldd	r23, Z+1	; 0x01
    170c:	82 81       	ldd	r24, Z+2	; 0x02
    170e:	93 81       	ldd	r25, Z+3	; 0x03
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	3f ef       	ldi	r19, 0xFF	; 255
    1714:	4f e7       	ldi	r20, 0x7F	; 127
    1716:	57 e4       	ldi	r21, 0x47	; 71
    1718:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    171c:	18 16       	cp	r1, r24
    171e:	0c f0       	brlt	.+2      	; 0x1722 <LCD_displayCharacter+0x242>
    1720:	43 c0       	rjmp	.+134    	; 0x17a8 <LCD_displayCharacter+0x2c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1722:	fe 01       	movw	r30, r28
    1724:	ef 5a       	subi	r30, 0xAF	; 175
    1726:	ff 4f       	sbci	r31, 0xFF	; 255
    1728:	60 81       	ld	r22, Z
    172a:	71 81       	ldd	r23, Z+1	; 0x01
    172c:	82 81       	ldd	r24, Z+2	; 0x02
    172e:	93 81       	ldd	r25, Z+3	; 0x03
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	40 e2       	ldi	r20, 0x20	; 32
    1736:	51 e4       	ldi	r21, 0x41	; 65
    1738:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    173c:	dc 01       	movw	r26, r24
    173e:	cb 01       	movw	r24, r22
    1740:	8e 01       	movw	r16, r28
    1742:	05 5b       	subi	r16, 0xB5	; 181
    1744:	1f 4f       	sbci	r17, 0xFF	; 255
    1746:	bc 01       	movw	r22, r24
    1748:	cd 01       	movw	r24, r26
    174a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	f8 01       	movw	r30, r16
    1754:	91 83       	std	Z+1, r25	; 0x01
    1756:	80 83       	st	Z, r24
    1758:	1f c0       	rjmp	.+62     	; 0x1798 <LCD_displayCharacter+0x2b8>
    175a:	fe 01       	movw	r30, r28
    175c:	e7 5b       	subi	r30, 0xB7	; 183
    175e:	ff 4f       	sbci	r31, 0xFF	; 255
    1760:	89 e1       	ldi	r24, 0x19	; 25
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	91 83       	std	Z+1, r25	; 0x01
    1766:	80 83       	st	Z, r24
    1768:	fe 01       	movw	r30, r28
    176a:	e7 5b       	subi	r30, 0xB7	; 183
    176c:	ff 4f       	sbci	r31, 0xFF	; 255
    176e:	80 81       	ld	r24, Z
    1770:	91 81       	ldd	r25, Z+1	; 0x01
    1772:	01 97       	sbiw	r24, 0x01	; 1
    1774:	f1 f7       	brne	.-4      	; 0x1772 <LCD_displayCharacter+0x292>
    1776:	fe 01       	movw	r30, r28
    1778:	e7 5b       	subi	r30, 0xB7	; 183
    177a:	ff 4f       	sbci	r31, 0xFF	; 255
    177c:	91 83       	std	Z+1, r25	; 0x01
    177e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1780:	de 01       	movw	r26, r28
    1782:	a5 5b       	subi	r26, 0xB5	; 181
    1784:	bf 4f       	sbci	r27, 0xFF	; 255
    1786:	fe 01       	movw	r30, r28
    1788:	e5 5b       	subi	r30, 0xB5	; 181
    178a:	ff 4f       	sbci	r31, 0xFF	; 255
    178c:	80 81       	ld	r24, Z
    178e:	91 81       	ldd	r25, Z+1	; 0x01
    1790:	01 97       	sbiw	r24, 0x01	; 1
    1792:	11 96       	adiw	r26, 0x01	; 1
    1794:	9c 93       	st	X, r25
    1796:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1798:	fe 01       	movw	r30, r28
    179a:	e5 5b       	subi	r30, 0xB5	; 181
    179c:	ff 4f       	sbci	r31, 0xFF	; 255
    179e:	80 81       	ld	r24, Z
    17a0:	91 81       	ldd	r25, Z+1	; 0x01
    17a2:	00 97       	sbiw	r24, 0x00	; 0
    17a4:	d1 f6       	brne	.-76     	; 0x175a <LCD_displayCharacter+0x27a>
    17a6:	27 c0       	rjmp	.+78     	; 0x17f6 <LCD_displayCharacter+0x316>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a8:	8e 01       	movw	r16, r28
    17aa:	05 5b       	subi	r16, 0xB5	; 181
    17ac:	1f 4f       	sbci	r17, 0xFF	; 255
    17ae:	fe 01       	movw	r30, r28
    17b0:	e3 5b       	subi	r30, 0xB3	; 179
    17b2:	ff 4f       	sbci	r31, 0xFF	; 255
    17b4:	60 81       	ld	r22, Z
    17b6:	71 81       	ldd	r23, Z+1	; 0x01
    17b8:	82 81       	ldd	r24, Z+2	; 0x02
    17ba:	93 81       	ldd	r25, Z+3	; 0x03
    17bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c0:	dc 01       	movw	r26, r24
    17c2:	cb 01       	movw	r24, r22
    17c4:	f8 01       	movw	r30, r16
    17c6:	91 83       	std	Z+1, r25	; 0x01
    17c8:	80 83       	st	Z, r24
    17ca:	de 01       	movw	r26, r28
    17cc:	a9 5b       	subi	r26, 0xB9	; 185
    17ce:	bf 4f       	sbci	r27, 0xFF	; 255
    17d0:	fe 01       	movw	r30, r28
    17d2:	e5 5b       	subi	r30, 0xB5	; 181
    17d4:	ff 4f       	sbci	r31, 0xFF	; 255
    17d6:	80 81       	ld	r24, Z
    17d8:	91 81       	ldd	r25, Z+1	; 0x01
    17da:	8d 93       	st	X+, r24
    17dc:	9c 93       	st	X, r25
    17de:	fe 01       	movw	r30, r28
    17e0:	e9 5b       	subi	r30, 0xB9	; 185
    17e2:	ff 4f       	sbci	r31, 0xFF	; 255
    17e4:	80 81       	ld	r24, Z
    17e6:	91 81       	ldd	r25, Z+1	; 0x01
    17e8:	01 97       	sbiw	r24, 0x01	; 1
    17ea:	f1 f7       	brne	.-4      	; 0x17e8 <LCD_displayCharacter+0x308>
    17ec:	fe 01       	movw	r30, r28
    17ee:	e9 5b       	subi	r30, 0xB9	; 185
    17f0:	ff 4f       	sbci	r31, 0xFF	; 255
    17f2:	91 83       	std	Z+1, r25	; 0x01
    17f4:	80 83       	st	Z, r24
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
    17f6:	ab e3       	ldi	r26, 0x3B	; 59
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	eb e3       	ldi	r30, 0x3B	; 59
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	98 2f       	mov	r25, r24
    1802:	90 7f       	andi	r25, 0xF0	; 240
    1804:	fe 01       	movw	r30, r28
    1806:	ed 59       	subi	r30, 0x9D	; 157
    1808:	ff 4f       	sbci	r31, 0xFF	; 255
    180a:	80 81       	ld	r24, Z
    180c:	82 95       	swap	r24
    180e:	8f 70       	andi	r24, 0x0F	; 15
    1810:	89 2b       	or	r24, r25
    1812:	8c 93       	st	X, r24
    1814:	fe 01       	movw	r30, r28
    1816:	ed 5b       	subi	r30, 0xBD	; 189
    1818:	ff 4f       	sbci	r31, 0xFF	; 255
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	a0 e8       	ldi	r26, 0x80	; 128
    1820:	bf e3       	ldi	r27, 0x3F	; 63
    1822:	80 83       	st	Z, r24
    1824:	91 83       	std	Z+1, r25	; 0x01
    1826:	a2 83       	std	Z+2, r26	; 0x02
    1828:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    182a:	8e 01       	movw	r16, r28
    182c:	01 5c       	subi	r16, 0xC1	; 193
    182e:	1f 4f       	sbci	r17, 0xFF	; 255
    1830:	fe 01       	movw	r30, r28
    1832:	ed 5b       	subi	r30, 0xBD	; 189
    1834:	ff 4f       	sbci	r31, 0xFF	; 255
    1836:	60 81       	ld	r22, Z
    1838:	71 81       	ldd	r23, Z+1	; 0x01
    183a:	82 81       	ldd	r24, Z+2	; 0x02
    183c:	93 81       	ldd	r25, Z+3	; 0x03
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	4a e7       	ldi	r20, 0x7A	; 122
    1844:	53 e4       	ldi	r21, 0x43	; 67
    1846:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	f8 01       	movw	r30, r16
    1850:	80 83       	st	Z, r24
    1852:	91 83       	std	Z+1, r25	; 0x01
    1854:	a2 83       	std	Z+2, r26	; 0x02
    1856:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1858:	fe 01       	movw	r30, r28
    185a:	ff 96       	adiw	r30, 0x3f	; 63
    185c:	60 81       	ld	r22, Z
    185e:	71 81       	ldd	r23, Z+1	; 0x01
    1860:	82 81       	ldd	r24, Z+2	; 0x02
    1862:	93 81       	ldd	r25, Z+3	; 0x03
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	40 e8       	ldi	r20, 0x80	; 128
    186a:	5f e3       	ldi	r21, 0x3F	; 63
    186c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1870:	88 23       	and	r24, r24
    1872:	2c f4       	brge	.+10     	; 0x187e <LCD_displayCharacter+0x39e>
		__ticks = 1;
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	9e af       	std	Y+62, r25	; 0x3e
    187a:	8d af       	std	Y+61, r24	; 0x3d
    187c:	46 c0       	rjmp	.+140    	; 0x190a <LCD_displayCharacter+0x42a>
	else if (__tmp > 65535)
    187e:	fe 01       	movw	r30, r28
    1880:	ff 96       	adiw	r30, 0x3f	; 63
    1882:	60 81       	ld	r22, Z
    1884:	71 81       	ldd	r23, Z+1	; 0x01
    1886:	82 81       	ldd	r24, Z+2	; 0x02
    1888:	93 81       	ldd	r25, Z+3	; 0x03
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	3f ef       	ldi	r19, 0xFF	; 255
    188e:	4f e7       	ldi	r20, 0x7F	; 127
    1890:	57 e4       	ldi	r21, 0x47	; 71
    1892:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1896:	18 16       	cp	r1, r24
    1898:	64 f5       	brge	.+88     	; 0x18f2 <LCD_displayCharacter+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    189a:	fe 01       	movw	r30, r28
    189c:	ed 5b       	subi	r30, 0xBD	; 189
    189e:	ff 4f       	sbci	r31, 0xFF	; 255
    18a0:	60 81       	ld	r22, Z
    18a2:	71 81       	ldd	r23, Z+1	; 0x01
    18a4:	82 81       	ldd	r24, Z+2	; 0x02
    18a6:	93 81       	ldd	r25, Z+3	; 0x03
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	40 e2       	ldi	r20, 0x20	; 32
    18ae:	51 e4       	ldi	r21, 0x41	; 65
    18b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b4:	dc 01       	movw	r26, r24
    18b6:	cb 01       	movw	r24, r22
    18b8:	bc 01       	movw	r22, r24
    18ba:	cd 01       	movw	r24, r26
    18bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	9e af       	std	Y+62, r25	; 0x3e
    18c6:	8d af       	std	Y+61, r24	; 0x3d
    18c8:	0f c0       	rjmp	.+30     	; 0x18e8 <LCD_displayCharacter+0x408>
    18ca:	89 e1       	ldi	r24, 0x19	; 25
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	9c af       	std	Y+60, r25	; 0x3c
    18d0:	8b af       	std	Y+59, r24	; 0x3b
    18d2:	8b ad       	ldd	r24, Y+59	; 0x3b
    18d4:	9c ad       	ldd	r25, Y+60	; 0x3c
    18d6:	01 97       	sbiw	r24, 0x01	; 1
    18d8:	f1 f7       	brne	.-4      	; 0x18d6 <LCD_displayCharacter+0x3f6>
    18da:	9c af       	std	Y+60, r25	; 0x3c
    18dc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18de:	8d ad       	ldd	r24, Y+61	; 0x3d
    18e0:	9e ad       	ldd	r25, Y+62	; 0x3e
    18e2:	01 97       	sbiw	r24, 0x01	; 1
    18e4:	9e af       	std	Y+62, r25	; 0x3e
    18e6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    18ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    18ec:	00 97       	sbiw	r24, 0x00	; 0
    18ee:	69 f7       	brne	.-38     	; 0x18ca <LCD_displayCharacter+0x3ea>
    18f0:	16 c0       	rjmp	.+44     	; 0x191e <LCD_displayCharacter+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18f2:	fe 01       	movw	r30, r28
    18f4:	ff 96       	adiw	r30, 0x3f	; 63
    18f6:	60 81       	ld	r22, Z
    18f8:	71 81       	ldd	r23, Z+1	; 0x01
    18fa:	82 81       	ldd	r24, Z+2	; 0x02
    18fc:	93 81       	ldd	r25, Z+3	; 0x03
    18fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1902:	dc 01       	movw	r26, r24
    1904:	cb 01       	movw	r24, r22
    1906:	9e af       	std	Y+62, r25	; 0x3e
    1908:	8d af       	std	Y+61, r24	; 0x3d
    190a:	8d ad       	ldd	r24, Y+61	; 0x3d
    190c:	9e ad       	ldd	r25, Y+62	; 0x3e
    190e:	9a af       	std	Y+58, r25	; 0x3a
    1910:	89 af       	std	Y+57, r24	; 0x39
    1912:	89 ad       	ldd	r24, Y+57	; 0x39
    1914:	9a ad       	ldd	r25, Y+58	; 0x3a
    1916:	01 97       	sbiw	r24, 0x01	; 1
    1918:	f1 f7       	brne	.-4      	; 0x1916 <LCD_displayCharacter+0x436>
    191a:	9a af       	std	Y+58, r25	; 0x3a
    191c:	89 af       	std	Y+57, r24	; 0x39
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    191e:	ab e3       	ldi	r26, 0x3B	; 59
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	eb e3       	ldi	r30, 0x3B	; 59
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	8f 7d       	andi	r24, 0xDF	; 223
    192a:	8c 93       	st	X, r24
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	a0 e8       	ldi	r26, 0x80	; 128
    1932:	bf e3       	ldi	r27, 0x3F	; 63
    1934:	8d ab       	std	Y+53, r24	; 0x35
    1936:	9e ab       	std	Y+54, r25	; 0x36
    1938:	af ab       	std	Y+55, r26	; 0x37
    193a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    193c:	6d a9       	ldd	r22, Y+53	; 0x35
    193e:	7e a9       	ldd	r23, Y+54	; 0x36
    1940:	8f a9       	ldd	r24, Y+55	; 0x37
    1942:	98 ad       	ldd	r25, Y+56	; 0x38
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	4a e7       	ldi	r20, 0x7A	; 122
    194a:	53 e4       	ldi	r21, 0x43	; 67
    194c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1950:	dc 01       	movw	r26, r24
    1952:	cb 01       	movw	r24, r22
    1954:	89 ab       	std	Y+49, r24	; 0x31
    1956:	9a ab       	std	Y+50, r25	; 0x32
    1958:	ab ab       	std	Y+51, r26	; 0x33
    195a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    195c:	69 a9       	ldd	r22, Y+49	; 0x31
    195e:	7a a9       	ldd	r23, Y+50	; 0x32
    1960:	8b a9       	ldd	r24, Y+51	; 0x33
    1962:	9c a9       	ldd	r25, Y+52	; 0x34
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	40 e8       	ldi	r20, 0x80	; 128
    196a:	5f e3       	ldi	r21, 0x3F	; 63
    196c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1970:	88 23       	and	r24, r24
    1972:	2c f4       	brge	.+10     	; 0x197e <LCD_displayCharacter+0x49e>
		__ticks = 1;
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	98 ab       	std	Y+48, r25	; 0x30
    197a:	8f a7       	std	Y+47, r24	; 0x2f
    197c:	3f c0       	rjmp	.+126    	; 0x19fc <LCD_displayCharacter+0x51c>
	else if (__tmp > 65535)
    197e:	69 a9       	ldd	r22, Y+49	; 0x31
    1980:	7a a9       	ldd	r23, Y+50	; 0x32
    1982:	8b a9       	ldd	r24, Y+51	; 0x33
    1984:	9c a9       	ldd	r25, Y+52	; 0x34
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	3f ef       	ldi	r19, 0xFF	; 255
    198a:	4f e7       	ldi	r20, 0x7F	; 127
    198c:	57 e4       	ldi	r21, 0x47	; 71
    198e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1992:	18 16       	cp	r1, r24
    1994:	4c f5       	brge	.+82     	; 0x19e8 <LCD_displayCharacter+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1996:	6d a9       	ldd	r22, Y+53	; 0x35
    1998:	7e a9       	ldd	r23, Y+54	; 0x36
    199a:	8f a9       	ldd	r24, Y+55	; 0x37
    199c:	98 ad       	ldd	r25, Y+56	; 0x38
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	40 e2       	ldi	r20, 0x20	; 32
    19a4:	51 e4       	ldi	r21, 0x41	; 65
    19a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19aa:	dc 01       	movw	r26, r24
    19ac:	cb 01       	movw	r24, r22
    19ae:	bc 01       	movw	r22, r24
    19b0:	cd 01       	movw	r24, r26
    19b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	98 ab       	std	Y+48, r25	; 0x30
    19bc:	8f a7       	std	Y+47, r24	; 0x2f
    19be:	0f c0       	rjmp	.+30     	; 0x19de <LCD_displayCharacter+0x4fe>
    19c0:	89 e1       	ldi	r24, 0x19	; 25
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	9e a7       	std	Y+46, r25	; 0x2e
    19c6:	8d a7       	std	Y+45, r24	; 0x2d
    19c8:	8d a5       	ldd	r24, Y+45	; 0x2d
    19ca:	9e a5       	ldd	r25, Y+46	; 0x2e
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	f1 f7       	brne	.-4      	; 0x19cc <LCD_displayCharacter+0x4ec>
    19d0:	9e a7       	std	Y+46, r25	; 0x2e
    19d2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    19d6:	98 a9       	ldd	r25, Y+48	; 0x30
    19d8:	01 97       	sbiw	r24, 0x01	; 1
    19da:	98 ab       	std	Y+48, r25	; 0x30
    19dc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19de:	8f a5       	ldd	r24, Y+47	; 0x2f
    19e0:	98 a9       	ldd	r25, Y+48	; 0x30
    19e2:	00 97       	sbiw	r24, 0x00	; 0
    19e4:	69 f7       	brne	.-38     	; 0x19c0 <LCD_displayCharacter+0x4e0>
    19e6:	14 c0       	rjmp	.+40     	; 0x1a10 <LCD_displayCharacter+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19e8:	69 a9       	ldd	r22, Y+49	; 0x31
    19ea:	7a a9       	ldd	r23, Y+50	; 0x32
    19ec:	8b a9       	ldd	r24, Y+51	; 0x33
    19ee:	9c a9       	ldd	r25, Y+52	; 0x34
    19f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f4:	dc 01       	movw	r26, r24
    19f6:	cb 01       	movw	r24, r22
    19f8:	98 ab       	std	Y+48, r25	; 0x30
    19fa:	8f a7       	std	Y+47, r24	; 0x2f
    19fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    19fe:	98 a9       	ldd	r25, Y+48	; 0x30
    1a00:	9c a7       	std	Y+44, r25	; 0x2c
    1a02:	8b a7       	std	Y+43, r24	; 0x2b
    1a04:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a06:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a08:	01 97       	sbiw	r24, 0x01	; 1
    1a0a:	f1 f7       	brne	.-4      	; 0x1a08 <LCD_displayCharacter+0x528>
    1a0c:	9c a7       	std	Y+44, r25	; 0x2c
    1a0e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1a10:	ab e3       	ldi	r26, 0x3B	; 59
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	eb e3       	ldi	r30, 0x3B	; 59
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	80 62       	ori	r24, 0x20	; 32
    1a1c:	8c 93       	st	X, r24
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	a0 e8       	ldi	r26, 0x80	; 128
    1a24:	bf e3       	ldi	r27, 0x3F	; 63
    1a26:	8f a3       	std	Y+39, r24	; 0x27
    1a28:	98 a7       	std	Y+40, r25	; 0x28
    1a2a:	a9 a7       	std	Y+41, r26	; 0x29
    1a2c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a2e:	6f a1       	ldd	r22, Y+39	; 0x27
    1a30:	78 a5       	ldd	r23, Y+40	; 0x28
    1a32:	89 a5       	ldd	r24, Y+41	; 0x29
    1a34:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	4a e7       	ldi	r20, 0x7A	; 122
    1a3c:	53 e4       	ldi	r21, 0x43	; 67
    1a3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a42:	dc 01       	movw	r26, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	8b a3       	std	Y+35, r24	; 0x23
    1a48:	9c a3       	std	Y+36, r25	; 0x24
    1a4a:	ad a3       	std	Y+37, r26	; 0x25
    1a4c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a4e:	6b a1       	ldd	r22, Y+35	; 0x23
    1a50:	7c a1       	ldd	r23, Y+36	; 0x24
    1a52:	8d a1       	ldd	r24, Y+37	; 0x25
    1a54:	9e a1       	ldd	r25, Y+38	; 0x26
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	40 e8       	ldi	r20, 0x80	; 128
    1a5c:	5f e3       	ldi	r21, 0x3F	; 63
    1a5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a62:	88 23       	and	r24, r24
    1a64:	2c f4       	brge	.+10     	; 0x1a70 <LCD_displayCharacter+0x590>
		__ticks = 1;
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	9a a3       	std	Y+34, r25	; 0x22
    1a6c:	89 a3       	std	Y+33, r24	; 0x21
    1a6e:	3f c0       	rjmp	.+126    	; 0x1aee <LCD_displayCharacter+0x60e>
	else if (__tmp > 65535)
    1a70:	6b a1       	ldd	r22, Y+35	; 0x23
    1a72:	7c a1       	ldd	r23, Y+36	; 0x24
    1a74:	8d a1       	ldd	r24, Y+37	; 0x25
    1a76:	9e a1       	ldd	r25, Y+38	; 0x26
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	3f ef       	ldi	r19, 0xFF	; 255
    1a7c:	4f e7       	ldi	r20, 0x7F	; 127
    1a7e:	57 e4       	ldi	r21, 0x47	; 71
    1a80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a84:	18 16       	cp	r1, r24
    1a86:	4c f5       	brge	.+82     	; 0x1ada <LCD_displayCharacter+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a88:	6f a1       	ldd	r22, Y+39	; 0x27
    1a8a:	78 a5       	ldd	r23, Y+40	; 0x28
    1a8c:	89 a5       	ldd	r24, Y+41	; 0x29
    1a8e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	40 e2       	ldi	r20, 0x20	; 32
    1a96:	51 e4       	ldi	r21, 0x41	; 65
    1a98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	bc 01       	movw	r22, r24
    1aa2:	cd 01       	movw	r24, r26
    1aa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	9a a3       	std	Y+34, r25	; 0x22
    1aae:	89 a3       	std	Y+33, r24	; 0x21
    1ab0:	0f c0       	rjmp	.+30     	; 0x1ad0 <LCD_displayCharacter+0x5f0>
    1ab2:	89 e1       	ldi	r24, 0x19	; 25
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	98 a3       	std	Y+32, r25	; 0x20
    1ab8:	8f 8f       	std	Y+31, r24	; 0x1f
    1aba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1abc:	98 a1       	ldd	r25, Y+32	; 0x20
    1abe:	01 97       	sbiw	r24, 0x01	; 1
    1ac0:	f1 f7       	brne	.-4      	; 0x1abe <LCD_displayCharacter+0x5de>
    1ac2:	98 a3       	std	Y+32, r25	; 0x20
    1ac4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ac8:	9a a1       	ldd	r25, Y+34	; 0x22
    1aca:	01 97       	sbiw	r24, 0x01	; 1
    1acc:	9a a3       	std	Y+34, r25	; 0x22
    1ace:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ad2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ad4:	00 97       	sbiw	r24, 0x00	; 0
    1ad6:	69 f7       	brne	.-38     	; 0x1ab2 <LCD_displayCharacter+0x5d2>
    1ad8:	14 c0       	rjmp	.+40     	; 0x1b02 <LCD_displayCharacter+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ada:	6b a1       	ldd	r22, Y+35	; 0x23
    1adc:	7c a1       	ldd	r23, Y+36	; 0x24
    1ade:	8d a1       	ldd	r24, Y+37	; 0x25
    1ae0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ae2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	9a a3       	std	Y+34, r25	; 0x22
    1aec:	89 a3       	std	Y+33, r24	; 0x21
    1aee:	89 a1       	ldd	r24, Y+33	; 0x21
    1af0:	9a a1       	ldd	r25, Y+34	; 0x22
    1af2:	9e 8f       	std	Y+30, r25	; 0x1e
    1af4:	8d 8f       	std	Y+29, r24	; 0x1d
    1af6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1af8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	f1 f7       	brne	.-4      	; 0x1afa <LCD_displayCharacter+0x61a>
    1afe:	9e 8f       	std	Y+30, r25	; 0x1e
    1b00:	8d 8f       	std	Y+29, r24	; 0x1d

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
    1b02:	ab e3       	ldi	r26, 0x3B	; 59
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	eb e3       	ldi	r30, 0x3B	; 59
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	98 2f       	mov	r25, r24
    1b0e:	90 7f       	andi	r25, 0xF0	; 240
    1b10:	fe 01       	movw	r30, r28
    1b12:	ed 59       	subi	r30, 0x9D	; 157
    1b14:	ff 4f       	sbci	r31, 0xFF	; 255
    1b16:	80 81       	ld	r24, Z
    1b18:	8f 70       	andi	r24, 0x0F	; 15
    1b1a:	89 2b       	or	r24, r25
    1b1c:	8c 93       	st	X, r24
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	a0 e8       	ldi	r26, 0x80	; 128
    1b24:	bf e3       	ldi	r27, 0x3F	; 63
    1b26:	89 8f       	std	Y+25, r24	; 0x19
    1b28:	9a 8f       	std	Y+26, r25	; 0x1a
    1b2a:	ab 8f       	std	Y+27, r26	; 0x1b
    1b2c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b2e:	69 8d       	ldd	r22, Y+25	; 0x19
    1b30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	4a e7       	ldi	r20, 0x7A	; 122
    1b3c:	53 e4       	ldi	r21, 0x43	; 67
    1b3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	8d 8b       	std	Y+21, r24	; 0x15
    1b48:	9e 8b       	std	Y+22, r25	; 0x16
    1b4a:	af 8b       	std	Y+23, r26	; 0x17
    1b4c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b4e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b50:	7e 89       	ldd	r23, Y+22	; 0x16
    1b52:	8f 89       	ldd	r24, Y+23	; 0x17
    1b54:	98 8d       	ldd	r25, Y+24	; 0x18
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	40 e8       	ldi	r20, 0x80	; 128
    1b5c:	5f e3       	ldi	r21, 0x3F	; 63
    1b5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b62:	88 23       	and	r24, r24
    1b64:	2c f4       	brge	.+10     	; 0x1b70 <LCD_displayCharacter+0x690>
		__ticks = 1;
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	9c 8b       	std	Y+20, r25	; 0x14
    1b6c:	8b 8b       	std	Y+19, r24	; 0x13
    1b6e:	3f c0       	rjmp	.+126    	; 0x1bee <LCD_displayCharacter+0x70e>
	else if (__tmp > 65535)
    1b70:	6d 89       	ldd	r22, Y+21	; 0x15
    1b72:	7e 89       	ldd	r23, Y+22	; 0x16
    1b74:	8f 89       	ldd	r24, Y+23	; 0x17
    1b76:	98 8d       	ldd	r25, Y+24	; 0x18
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	3f ef       	ldi	r19, 0xFF	; 255
    1b7c:	4f e7       	ldi	r20, 0x7F	; 127
    1b7e:	57 e4       	ldi	r21, 0x47	; 71
    1b80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b84:	18 16       	cp	r1, r24
    1b86:	4c f5       	brge	.+82     	; 0x1bda <LCD_displayCharacter+0x6fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b88:	69 8d       	ldd	r22, Y+25	; 0x19
    1b8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	40 e2       	ldi	r20, 0x20	; 32
    1b96:	51 e4       	ldi	r21, 0x41	; 65
    1b98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	bc 01       	movw	r22, r24
    1ba2:	cd 01       	movw	r24, r26
    1ba4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	9c 8b       	std	Y+20, r25	; 0x14
    1bae:	8b 8b       	std	Y+19, r24	; 0x13
    1bb0:	0f c0       	rjmp	.+30     	; 0x1bd0 <LCD_displayCharacter+0x6f0>
    1bb2:	89 e1       	ldi	r24, 0x19	; 25
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	9a 8b       	std	Y+18, r25	; 0x12
    1bb8:	89 8b       	std	Y+17, r24	; 0x11
    1bba:	89 89       	ldd	r24, Y+17	; 0x11
    1bbc:	9a 89       	ldd	r25, Y+18	; 0x12
    1bbe:	01 97       	sbiw	r24, 0x01	; 1
    1bc0:	f1 f7       	brne	.-4      	; 0x1bbe <LCD_displayCharacter+0x6de>
    1bc2:	9a 8b       	std	Y+18, r25	; 0x12
    1bc4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc6:	8b 89       	ldd	r24, Y+19	; 0x13
    1bc8:	9c 89       	ldd	r25, Y+20	; 0x14
    1bca:	01 97       	sbiw	r24, 0x01	; 1
    1bcc:	9c 8b       	std	Y+20, r25	; 0x14
    1bce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd0:	8b 89       	ldd	r24, Y+19	; 0x13
    1bd2:	9c 89       	ldd	r25, Y+20	; 0x14
    1bd4:	00 97       	sbiw	r24, 0x00	; 0
    1bd6:	69 f7       	brne	.-38     	; 0x1bb2 <LCD_displayCharacter+0x6d2>
    1bd8:	14 c0       	rjmp	.+40     	; 0x1c02 <LCD_displayCharacter+0x722>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bda:	6d 89       	ldd	r22, Y+21	; 0x15
    1bdc:	7e 89       	ldd	r23, Y+22	; 0x16
    1bde:	8f 89       	ldd	r24, Y+23	; 0x17
    1be0:	98 8d       	ldd	r25, Y+24	; 0x18
    1be2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	9c 8b       	std	Y+20, r25	; 0x14
    1bec:	8b 8b       	std	Y+19, r24	; 0x13
    1bee:	8b 89       	ldd	r24, Y+19	; 0x13
    1bf0:	9c 89       	ldd	r25, Y+20	; 0x14
    1bf2:	98 8b       	std	Y+16, r25	; 0x10
    1bf4:	8f 87       	std	Y+15, r24	; 0x0f
    1bf6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bf8:	98 89       	ldd	r25, Y+16	; 0x10
    1bfa:	01 97       	sbiw	r24, 0x01	; 1
    1bfc:	f1 f7       	brne	.-4      	; 0x1bfa <LCD_displayCharacter+0x71a>
    1bfe:	98 8b       	std	Y+16, r25	; 0x10
    1c00:	8f 87       	std	Y+15, r24	; 0x0f
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1c02:	ab e3       	ldi	r26, 0x3B	; 59
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	eb e3       	ldi	r30, 0x3B	; 59
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	8f 7d       	andi	r24, 0xDF	; 223
    1c0e:	8c 93       	st	X, r24
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	a0 e8       	ldi	r26, 0x80	; 128
    1c16:	bf e3       	ldi	r27, 0x3F	; 63
    1c18:	8b 87       	std	Y+11, r24	; 0x0b
    1c1a:	9c 87       	std	Y+12, r25	; 0x0c
    1c1c:	ad 87       	std	Y+13, r26	; 0x0d
    1c1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c20:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c22:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c26:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	4a e7       	ldi	r20, 0x7A	; 122
    1c2e:	53 e4       	ldi	r21, 0x43	; 67
    1c30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	8f 83       	std	Y+7, r24	; 0x07
    1c3a:	98 87       	std	Y+8, r25	; 0x08
    1c3c:	a9 87       	std	Y+9, r26	; 0x09
    1c3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c40:	6f 81       	ldd	r22, Y+7	; 0x07
    1c42:	78 85       	ldd	r23, Y+8	; 0x08
    1c44:	89 85       	ldd	r24, Y+9	; 0x09
    1c46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	40 e8       	ldi	r20, 0x80	; 128
    1c4e:	5f e3       	ldi	r21, 0x3F	; 63
    1c50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c54:	88 23       	and	r24, r24
    1c56:	2c f4       	brge	.+10     	; 0x1c62 <LCD_displayCharacter+0x782>
		__ticks = 1;
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	9e 83       	std	Y+6, r25	; 0x06
    1c5e:	8d 83       	std	Y+5, r24	; 0x05
    1c60:	3f c0       	rjmp	.+126    	; 0x1ce0 <LCD_displayCharacter+0x800>
	else if (__tmp > 65535)
    1c62:	6f 81       	ldd	r22, Y+7	; 0x07
    1c64:	78 85       	ldd	r23, Y+8	; 0x08
    1c66:	89 85       	ldd	r24, Y+9	; 0x09
    1c68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	3f ef       	ldi	r19, 0xFF	; 255
    1c6e:	4f e7       	ldi	r20, 0x7F	; 127
    1c70:	57 e4       	ldi	r21, 0x47	; 71
    1c72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c76:	18 16       	cp	r1, r24
    1c78:	4c f5       	brge	.+82     	; 0x1ccc <LCD_displayCharacter+0x7ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	40 e2       	ldi	r20, 0x20	; 32
    1c88:	51 e4       	ldi	r21, 0x41	; 65
    1c8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	bc 01       	movw	r22, r24
    1c94:	cd 01       	movw	r24, r26
    1c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	9e 83       	std	Y+6, r25	; 0x06
    1ca0:	8d 83       	std	Y+5, r24	; 0x05
    1ca2:	0f c0       	rjmp	.+30     	; 0x1cc2 <LCD_displayCharacter+0x7e2>
    1ca4:	89 e1       	ldi	r24, 0x19	; 25
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	9c 83       	std	Y+4, r25	; 0x04
    1caa:	8b 83       	std	Y+3, r24	; 0x03
    1cac:	8b 81       	ldd	r24, Y+3	; 0x03
    1cae:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	f1 f7       	brne	.-4      	; 0x1cb0 <LCD_displayCharacter+0x7d0>
    1cb4:	9c 83       	std	Y+4, r25	; 0x04
    1cb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cba:	9e 81       	ldd	r25, Y+6	; 0x06
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	9e 83       	std	Y+6, r25	; 0x06
    1cc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc6:	00 97       	sbiw	r24, 0x00	; 0
    1cc8:	69 f7       	brne	.-38     	; 0x1ca4 <LCD_displayCharacter+0x7c4>
    1cca:	14 c0       	rjmp	.+40     	; 0x1cf4 <LCD_displayCharacter+0x814>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ccc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cce:	78 85       	ldd	r23, Y+8	; 0x08
    1cd0:	89 85       	ldd	r24, Y+9	; 0x09
    1cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	9e 83       	std	Y+6, r25	; 0x06
    1cde:	8d 83       	std	Y+5, r24	; 0x05
    1ce0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce4:	9a 83       	std	Y+2, r25	; 0x02
    1ce6:	89 83       	std	Y+1, r24	; 0x01
    1ce8:	89 81       	ldd	r24, Y+1	; 0x01
    1cea:	9a 81       	ldd	r25, Y+2	; 0x02
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	f1 f7       	brne	.-4      	; 0x1cec <LCD_displayCharacter+0x80c>
    1cf0:	9a 83       	std	Y+2, r25	; 0x02
    1cf2:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1cf4:	cd 59       	subi	r28, 0x9D	; 157
    1cf6:	df 4f       	sbci	r29, 0xFF	; 255
    1cf8:	0f b6       	in	r0, 0x3f	; 63
    1cfa:	f8 94       	cli
    1cfc:	de bf       	out	0x3e, r29	; 62
    1cfe:	0f be       	out	0x3f, r0	; 63
    1d00:	cd bf       	out	0x3d, r28	; 61
    1d02:	cf 91       	pop	r28
    1d04:	df 91       	pop	r29
    1d06:	1f 91       	pop	r17
    1d08:	0f 91       	pop	r16
    1d0a:	08 95       	ret

00001d0c <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    1d0c:	df 93       	push	r29
    1d0e:	cf 93       	push	r28
    1d10:	00 d0       	rcall	.+0      	; 0x1d12 <LCD_displayString+0x6>
    1d12:	0f 92       	push	r0
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
    1d18:	9b 83       	std	Y+3, r25	; 0x03
    1d1a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1d1c:	19 82       	std	Y+1, r1	; 0x01
    1d1e:	0e c0       	rjmp	.+28     	; 0x1d3c <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1d20:	89 81       	ldd	r24, Y+1	; 0x01
    1d22:	28 2f       	mov	r18, r24
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	8a 81       	ldd	r24, Y+2	; 0x02
    1d28:	9b 81       	ldd	r25, Y+3	; 0x03
    1d2a:	fc 01       	movw	r30, r24
    1d2c:	e2 0f       	add	r30, r18
    1d2e:	f3 1f       	adc	r31, r19
    1d30:	80 81       	ld	r24, Z
    1d32:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <LCD_displayCharacter>
		i++;
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	8f 5f       	subi	r24, 0xFF	; 255
    1d3a:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	28 2f       	mov	r18, r24
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	9b 81       	ldd	r25, Y+3	; 0x03
    1d46:	fc 01       	movw	r30, r24
    1d48:	e2 0f       	add	r30, r18
    1d4a:	f3 1f       	adc	r31, r19
    1d4c:	80 81       	ld	r24, Z
    1d4e:	88 23       	and	r24, r24
    1d50:	39 f7       	brne	.-50     	; 0x1d20 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1d52:	0f 90       	pop	r0
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	cf 91       	pop	r28
    1d5a:	df 91       	pop	r29
    1d5c:	08 95       	ret

00001d5e <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    1d5e:	df 93       	push	r29
    1d60:	cf 93       	push	r28
    1d62:	00 d0       	rcall	.+0      	; 0x1d64 <LCD_goToRowColumn+0x6>
    1d64:	00 d0       	rcall	.+0      	; 0x1d66 <LCD_goToRowColumn+0x8>
    1d66:	0f 92       	push	r0
    1d68:	cd b7       	in	r28, 0x3d	; 61
    1d6a:	de b7       	in	r29, 0x3e	; 62
    1d6c:	8a 83       	std	Y+2, r24	; 0x02
    1d6e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    1d70:	8a 81       	ldd	r24, Y+2	; 0x02
    1d72:	28 2f       	mov	r18, r24
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	3d 83       	std	Y+5, r19	; 0x05
    1d78:	2c 83       	std	Y+4, r18	; 0x04
    1d7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d7e:	81 30       	cpi	r24, 0x01	; 1
    1d80:	91 05       	cpc	r25, r1
    1d82:	c1 f0       	breq	.+48     	; 0x1db4 <LCD_goToRowColumn+0x56>
    1d84:	2c 81       	ldd	r18, Y+4	; 0x04
    1d86:	3d 81       	ldd	r19, Y+5	; 0x05
    1d88:	22 30       	cpi	r18, 0x02	; 2
    1d8a:	31 05       	cpc	r19, r1
    1d8c:	2c f4       	brge	.+10     	; 0x1d98 <LCD_goToRowColumn+0x3a>
    1d8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d90:	9d 81       	ldd	r25, Y+5	; 0x05
    1d92:	00 97       	sbiw	r24, 0x00	; 0
    1d94:	61 f0       	breq	.+24     	; 0x1dae <LCD_goToRowColumn+0x50>
    1d96:	19 c0       	rjmp	.+50     	; 0x1dca <LCD_goToRowColumn+0x6c>
    1d98:	2c 81       	ldd	r18, Y+4	; 0x04
    1d9a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d9c:	22 30       	cpi	r18, 0x02	; 2
    1d9e:	31 05       	cpc	r19, r1
    1da0:	69 f0       	breq	.+26     	; 0x1dbc <LCD_goToRowColumn+0x5e>
    1da2:	8c 81       	ldd	r24, Y+4	; 0x04
    1da4:	9d 81       	ldd	r25, Y+5	; 0x05
    1da6:	83 30       	cpi	r24, 0x03	; 3
    1da8:	91 05       	cpc	r25, r1
    1daa:	61 f0       	breq	.+24     	; 0x1dc4 <LCD_goToRowColumn+0x66>
    1dac:	0e c0       	rjmp	.+28     	; 0x1dca <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    1dae:	8b 81       	ldd	r24, Y+3	; 0x03
    1db0:	89 83       	std	Y+1, r24	; 0x01
    1db2:	0b c0       	rjmp	.+22     	; 0x1dca <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    1db4:	8b 81       	ldd	r24, Y+3	; 0x03
    1db6:	80 5c       	subi	r24, 0xC0	; 192
    1db8:	89 83       	std	Y+1, r24	; 0x01
    1dba:	07 c0       	rjmp	.+14     	; 0x1dca <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    1dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbe:	80 5f       	subi	r24, 0xF0	; 240
    1dc0:	89 83       	std	Y+1, r24	; 0x01
    1dc2:	03 c0       	rjmp	.+6      	; 0x1dca <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    1dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc6:	80 5b       	subi	r24, 0xB0	; 176
    1dc8:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    1dca:	89 81       	ldd	r24, Y+1	; 0x01
    1dcc:	80 68       	ori	r24, 0x80	; 128
    1dce:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_sendCommand>
}
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	cf 91       	pop	r28
    1dde:	df 91       	pop	r29
    1de0:	08 95       	ret

00001de2 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1de2:	df 93       	push	r29
    1de4:	cf 93       	push	r28
    1de6:	00 d0       	rcall	.+0      	; 0x1de8 <LCD_displayStringRowColumn+0x6>
    1de8:	00 d0       	rcall	.+0      	; 0x1dea <LCD_displayStringRowColumn+0x8>
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
    1dee:	89 83       	std	Y+1, r24	; 0x01
    1df0:	6a 83       	std	Y+2, r22	; 0x02
    1df2:	5c 83       	std	Y+4, r21	; 0x04
    1df4:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    1df6:	89 81       	ldd	r24, Y+1	; 0x01
    1df8:	6a 81       	ldd	r22, Y+2	; 0x02
    1dfa:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    1dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1e00:	9c 81       	ldd	r25, Y+4	; 0x04
    1e02:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_displayString>
}
    1e06:	0f 90       	pop	r0
    1e08:	0f 90       	pop	r0
    1e0a:	0f 90       	pop	r0
    1e0c:	0f 90       	pop	r0
    1e0e:	cf 91       	pop	r28
    1e10:	df 91       	pop	r29
    1e12:	08 95       	ret

00001e14 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    1e14:	df 93       	push	r29
    1e16:	cf 93       	push	r28
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
    1e1c:	62 97       	sbiw	r28, 0x12	; 18
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	f8 94       	cli
    1e22:	de bf       	out	0x3e, r29	; 62
    1e24:	0f be       	out	0x3f, r0	; 63
    1e26:	cd bf       	out	0x3d, r28	; 61
    1e28:	9a 8b       	std	Y+18, r25	; 0x12
    1e2a:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    1e2c:	89 89       	ldd	r24, Y+17	; 0x11
    1e2e:	9a 89       	ldd	r25, Y+18	; 0x12
    1e30:	9e 01       	movw	r18, r28
    1e32:	2f 5f       	subi	r18, 0xFF	; 255
    1e34:	3f 4f       	sbci	r19, 0xFF	; 255
    1e36:	b9 01       	movw	r22, r18
    1e38:	4a e0       	ldi	r20, 0x0A	; 10
    1e3a:	50 e0       	ldi	r21, 0x00	; 0
    1e3c:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <itoa>
   LCD_displayString(buff);
    1e40:	ce 01       	movw	r24, r28
    1e42:	01 96       	adiw	r24, 0x01	; 1
    1e44:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_displayString>
}
    1e48:	62 96       	adiw	r28, 0x12	; 18
    1e4a:	0f b6       	in	r0, 0x3f	; 63
    1e4c:	f8 94       	cli
    1e4e:	de bf       	out	0x3e, r29	; 62
    1e50:	0f be       	out	0x3f, r0	; 63
    1e52:	cd bf       	out	0x3d, r28	; 61
    1e54:	cf 91       	pop	r28
    1e56:	df 91       	pop	r29
    1e58:	08 95       	ret

00001e5a <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    1e5a:	df 93       	push	r29
    1e5c:	cf 93       	push	r28
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_sendCommand>
}
    1e68:	cf 91       	pop	r28
    1e6a:	df 91       	pop	r29
    1e6c:	08 95       	ret

00001e6e <__vector_19>:
#include <string.h>

static sint8 count = 0;
static uint8 sec = 30;

ISR (TIMER0_COMP_vect) {
    1e6e:	1f 92       	push	r1
    1e70:	0f 92       	push	r0
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	0f 92       	push	r0
    1e76:	11 24       	eor	r1, r1
    1e78:	2f 93       	push	r18
    1e7a:	3f 93       	push	r19
    1e7c:	4f 93       	push	r20
    1e7e:	5f 93       	push	r21
    1e80:	6f 93       	push	r22
    1e82:	7f 93       	push	r23
    1e84:	8f 93       	push	r24
    1e86:	9f 93       	push	r25
    1e88:	af 93       	push	r26
    1e8a:	bf 93       	push	r27
    1e8c:	ef 93       	push	r30
    1e8e:	ff 93       	push	r31
    1e90:	df 93       	push	r29
    1e92:	cf 93       	push	r28
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
	if(++count == 4) {
    1e98:	80 91 1e 01 	lds	r24, 0x011E
    1e9c:	8f 5f       	subi	r24, 0xFF	; 255
    1e9e:	80 93 1e 01 	sts	0x011E, r24
    1ea2:	80 91 1e 01 	lds	r24, 0x011E
    1ea6:	84 30       	cpi	r24, 0x04	; 4
    1ea8:	01 f5       	brne	.+64     	; 0x1eea <__vector_19+0x7c>
		count = 0;
    1eaa:	10 92 1e 01 	sts	0x011E, r1
		sec--;
    1eae:	80 91 1c 01 	lds	r24, 0x011C
    1eb2:	81 50       	subi	r24, 0x01	; 1
    1eb4:	80 93 1c 01 	sts	0x011C, r24
		LCD_goToRowColumn(1, 6);
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	66 e0       	ldi	r22, 0x06	; 6
    1ebc:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_goToRowColumn>
		if(sec / 10)
    1ec0:	80 91 1c 01 	lds	r24, 0x011C
    1ec4:	8a 30       	cpi	r24, 0x0A	; 10
    1ec6:	38 f0       	brcs	.+14     	; 0x1ed6 <__vector_19+0x68>
			LCD_intgerToString(sec);
    1ec8:	80 91 1c 01 	lds	r24, 0x011C
    1ecc:	88 2f       	mov	r24, r24
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <LCD_intgerToString>
    1ed4:	0a c0       	rjmp	.+20     	; 0x1eea <__vector_19+0x7c>
		else {
			LCD_intgerToString(0);
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <LCD_intgerToString>
			LCD_intgerToString(sec);
    1ede:	80 91 1c 01 	lds	r24, 0x011C
    1ee2:	88 2f       	mov	r24, r24
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <LCD_intgerToString>
		}
	}
}
    1eea:	cf 91       	pop	r28
    1eec:	df 91       	pop	r29
    1eee:	ff 91       	pop	r31
    1ef0:	ef 91       	pop	r30
    1ef2:	bf 91       	pop	r27
    1ef4:	af 91       	pop	r26
    1ef6:	9f 91       	pop	r25
    1ef8:	8f 91       	pop	r24
    1efa:	7f 91       	pop	r23
    1efc:	6f 91       	pop	r22
    1efe:	5f 91       	pop	r21
    1f00:	4f 91       	pop	r20
    1f02:	3f 91       	pop	r19
    1f04:	2f 91       	pop	r18
    1f06:	0f 90       	pop	r0
    1f08:	0f be       	out	0x3f, r0	; 63
    1f0a:	0f 90       	pop	r0
    1f0c:	1f 90       	pop	r1
    1f0e:	18 95       	reti

00001f10 <main>:

int main(void) {
    1f10:	0f 93       	push	r16
    1f12:	1f 93       	push	r17
    1f14:	df 93       	push	r29
    1f16:	cf 93       	push	r28
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	cc 57       	subi	r28, 0x7C	; 124
    1f1e:	d0 40       	sbci	r29, 0x00	; 0
    1f20:	0f b6       	in	r0, 0x3f	; 63
    1f22:	f8 94       	cli
    1f24:	de bf       	out	0x3e, r29	; 62
    1f26:	0f be       	out	0x3f, r0	; 63
    1f28:	cd bf       	out	0x3d, r28	; 61
	TCCR0 |= (1 << FOC0) | (1 << WGM01) | (1 << CS02) | (1 << CS00);
    1f2a:	a3 e5       	ldi	r26, 0x53	; 83
    1f2c:	b0 e0       	ldi	r27, 0x00	; 0
    1f2e:	e3 e5       	ldi	r30, 0x53	; 83
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	80 81       	ld	r24, Z
    1f34:	8d 68       	ori	r24, 0x8D	; 141
    1f36:	8c 93       	st	X, r24
	OCR0 = 250;
    1f38:	ec e5       	ldi	r30, 0x5C	; 92
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	8a ef       	ldi	r24, 0xFA	; 250
    1f3e:	80 83       	st	Z, r24
	SREG |= (1 << 7); // Global interrupt
    1f40:	af e5       	ldi	r26, 0x5F	; 95
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	ef e5       	ldi	r30, 0x5F	; 95
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	80 68       	ori	r24, 0x80	; 128
    1f4c:	8c 93       	st	X, r24

	UART_init();
    1f4e:	0e 94 90 15 	call	0x2b20	; 0x2b20 <UART_init>
	LCD_init();
    1f52:	0e 94 39 06 	call	0xc72	; 0xc72 <LCD_init>
	LCD_sendCommand(CURSOR_BLINKING);
    1f56:	8f e0       	ldi	r24, 0x0F	; 15
    1f58:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_sendCommand>
	LCD_displayString("Enter Password:");
    1f5c:	80 e6       	ldi	r24, 0x60	; 96
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_displayString>
	LCD_goToRowColumn(1, 0);
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	60 e0       	ldi	r22, 0x00	; 0
    1f68:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_goToRowColumn>
	uint8 key, change, i = 0;
    1f6c:	fe 01       	movw	r30, r28
    1f6e:	ef 58       	subi	r30, 0x8F	; 143
    1f70:	ff 4f       	sbci	r31, 0xFF	; 255
    1f72:	10 82       	st	Z, r1
	uint8 pass[9];
	while(1) {
		key = KeyPad_getPressedKey();
    1f74:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    1f78:	fe 01       	movw	r30, r28
    1f7a:	ed 58       	subi	r30, 0x8D	; 141
    1f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7e:	80 83       	st	Z, r24
		if(key == '=' || key == 'C') {
    1f80:	fe 01       	movw	r30, r28
    1f82:	ed 58       	subi	r30, 0x8D	; 141
    1f84:	ff 4f       	sbci	r31, 0xFF	; 255
    1f86:	80 81       	ld	r24, Z
    1f88:	8d 33       	cpi	r24, 0x3D	; 61
    1f8a:	39 f0       	breq	.+14     	; 0x1f9a <main+0x8a>
    1f8c:	fe 01       	movw	r30, r28
    1f8e:	ed 58       	subi	r30, 0x8D	; 141
    1f90:	ff 4f       	sbci	r31, 0xFF	; 255
    1f92:	80 81       	ld	r24, Z
    1f94:	83 34       	cpi	r24, 0x43	; 67
    1f96:	09 f0       	breq	.+2      	; 0x1f9a <main+0x8a>
    1f98:	30 c5       	rjmp	.+2656   	; 0x29fa <main+0xaea>
			if(key == '=' && i < 10) {
    1f9a:	fe 01       	movw	r30, r28
    1f9c:	ed 58       	subi	r30, 0x8D	; 141
    1f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa0:	80 81       	ld	r24, Z
    1fa2:	8d 33       	cpi	r24, 0x3D	; 61
    1fa4:	09 f0       	breq	.+2      	; 0x1fa8 <main+0x98>
    1fa6:	83 c4       	rjmp	.+2310   	; 0x28ae <main+0x99e>
    1fa8:	fe 01       	movw	r30, r28
    1faa:	ef 58       	subi	r30, 0x8F	; 143
    1fac:	ff 4f       	sbci	r31, 0xFF	; 255
    1fae:	80 81       	ld	r24, Z
    1fb0:	8a 30       	cpi	r24, 0x0A	; 10
    1fb2:	08 f0       	brcs	.+2      	; 0x1fb6 <main+0xa6>
    1fb4:	7c c4       	rjmp	.+2296   	; 0x28ae <main+0x99e>
				pass[i] = '=';
    1fb6:	fe 01       	movw	r30, r28
    1fb8:	ef 58       	subi	r30, 0x8F	; 143
    1fba:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbc:	80 81       	ld	r24, Z
    1fbe:	28 2f       	mov	r18, r24
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	ce 01       	movw	r24, r28
    1fc4:	8c 58       	subi	r24, 0x8C	; 140
    1fc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc8:	fc 01       	movw	r30, r24
    1fca:	e2 0f       	add	r30, r18
    1fcc:	f3 1f       	adc	r31, r19
    1fce:	8d e3       	ldi	r24, 0x3D	; 61
    1fd0:	80 83       	st	Z, r24
				UART_sendString(pass);
    1fd2:	ce 01       	movw	r24, r28
    1fd4:	8c 58       	subi	r24, 0x8C	; 140
    1fd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd8:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <UART_sendString>
				if(change == FALSE) {
    1fdc:	fe 01       	movw	r30, r28
    1fde:	ee 58       	subi	r30, 0x8E	; 142
    1fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe2:	80 81       	ld	r24, Z
    1fe4:	88 23       	and	r24, r24
    1fe6:	09 f0       	breq	.+2      	; 0x1fea <main+0xda>
    1fe8:	d7 c3       	rjmp	.+1966   	; 0x2798 <main+0x888>
					key = UART_recieveByte();
    1fea:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <UART_recieveByte>
    1fee:	fe 01       	movw	r30, r28
    1ff0:	ed 58       	subi	r30, 0x8D	; 141
    1ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff4:	80 83       	st	Z, r24
					if(key == TRUE) { // Password is right
    1ff6:	fe 01       	movw	r30, r28
    1ff8:	ed 58       	subi	r30, 0x8D	; 141
    1ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffc:	80 81       	ld	r24, Z
    1ffe:	81 30       	cpi	r24, 0x01	; 1
    2000:	09 f0       	breq	.+2      	; 0x2004 <main+0xf4>
    2002:	87 c2       	rjmp	.+1294   	; 0x2512 <main+0x602>
						count = 0;
    2004:	10 92 1e 01 	sts	0x011E, r1
						LCD_sendCommand(CLEAR_COMMAND);
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_sendCommand>
						LCD_displayString("1-Open");
    200e:	80 e7       	ldi	r24, 0x70	; 112
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_displayString>
						LCD_displayStringRowColumn(1, 0, "2-Reset Password");
    2016:	27 e7       	ldi	r18, 0x77	; 119
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	60 e0       	ldi	r22, 0x00	; 0
    201e:	a9 01       	movw	r20, r18
    2020:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <LCD_displayStringRowColumn>
						key = KeyPad_getPressedKey();
    2024:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    2028:	fe 01       	movw	r30, r28
    202a:	ed 58       	subi	r30, 0x8D	; 141
    202c:	ff 4f       	sbci	r31, 0xFF	; 255
    202e:	80 83       	st	Z, r24
						UART_sendByte(key);
    2030:	fe 01       	movw	r30, r28
    2032:	ed 58       	subi	r30, 0x8D	; 141
    2034:	ff 4f       	sbci	r31, 0xFF	; 255
    2036:	80 81       	ld	r24, Z
    2038:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <UART_sendByte>
						if(key == '1') { // Opening the door
    203c:	fe 01       	movw	r30, r28
    203e:	ed 58       	subi	r30, 0x8D	; 141
    2040:	ff 4f       	sbci	r31, 0xFF	; 255
    2042:	80 81       	ld	r24, Z
    2044:	81 33       	cpi	r24, 0x31	; 49
    2046:	09 f0       	breq	.+2      	; 0x204a <main+0x13a>
    2048:	c9 c0       	rjmp	.+402    	; 0x21dc <main+0x2cc>
							LCD_sendCommand(CLEAR_COMMAND);
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_sendCommand>
							LCD_sendCommand(CURSOR_OFF);
    2050:	8c e0       	ldi	r24, 0x0C	; 12
    2052:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_sendCommand>
							LCD_displayStringRowColumn(0, 4, "Opened");
    2056:	28 e8       	ldi	r18, 0x88	; 136
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	64 e0       	ldi	r22, 0x04	; 4
    205e:	a9 01       	movw	r20, r18
    2060:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <LCD_displayStringRowColumn>
							LCD_displayStringRowColumn(1, 1, "Successfully");
    2064:	2f e8       	ldi	r18, 0x8F	; 143
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	61 e0       	ldi	r22, 0x01	; 1
    206c:	a9 01       	movw	r20, r18
    206e:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <LCD_displayStringRowColumn>
    2072:	fe 01       	movw	r30, r28
    2074:	e3 59       	subi	r30, 0x93	; 147
    2076:	ff 4f       	sbci	r31, 0xFF	; 255
    2078:	80 e0       	ldi	r24, 0x00	; 0
    207a:	90 e8       	ldi	r25, 0x80	; 128
    207c:	ab eb       	ldi	r26, 0xBB	; 187
    207e:	b4 e4       	ldi	r27, 0x44	; 68
    2080:	80 83       	st	Z, r24
    2082:	91 83       	std	Z+1, r25	; 0x01
    2084:	a2 83       	std	Z+2, r26	; 0x02
    2086:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2088:	8e 01       	movw	r16, r28
    208a:	07 59       	subi	r16, 0x97	; 151
    208c:	1f 4f       	sbci	r17, 0xFF	; 255
    208e:	fe 01       	movw	r30, r28
    2090:	e3 59       	subi	r30, 0x93	; 147
    2092:	ff 4f       	sbci	r31, 0xFF	; 255
    2094:	60 81       	ld	r22, Z
    2096:	71 81       	ldd	r23, Z+1	; 0x01
    2098:	82 81       	ldd	r24, Z+2	; 0x02
    209a:	93 81       	ldd	r25, Z+3	; 0x03
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	4a e7       	ldi	r20, 0x7A	; 122
    20a2:	53 e4       	ldi	r21, 0x43	; 67
    20a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a8:	dc 01       	movw	r26, r24
    20aa:	cb 01       	movw	r24, r22
    20ac:	f8 01       	movw	r30, r16
    20ae:	80 83       	st	Z, r24
    20b0:	91 83       	std	Z+1, r25	; 0x01
    20b2:	a2 83       	std	Z+2, r26	; 0x02
    20b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20b6:	fe 01       	movw	r30, r28
    20b8:	e7 59       	subi	r30, 0x97	; 151
    20ba:	ff 4f       	sbci	r31, 0xFF	; 255
    20bc:	60 81       	ld	r22, Z
    20be:	71 81       	ldd	r23, Z+1	; 0x01
    20c0:	82 81       	ldd	r24, Z+2	; 0x02
    20c2:	93 81       	ldd	r25, Z+3	; 0x03
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	40 e8       	ldi	r20, 0x80	; 128
    20ca:	5f e3       	ldi	r21, 0x3F	; 63
    20cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20d0:	88 23       	and	r24, r24
    20d2:	44 f4       	brge	.+16     	; 0x20e4 <main+0x1d4>
		__ticks = 1;
    20d4:	fe 01       	movw	r30, r28
    20d6:	e9 59       	subi	r30, 0x99	; 153
    20d8:	ff 4f       	sbci	r31, 0xFF	; 255
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	91 83       	std	Z+1, r25	; 0x01
    20e0:	80 83       	st	Z, r24
    20e2:	64 c0       	rjmp	.+200    	; 0x21ac <main+0x29c>
	else if (__tmp > 65535)
    20e4:	fe 01       	movw	r30, r28
    20e6:	e7 59       	subi	r30, 0x97	; 151
    20e8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ea:	60 81       	ld	r22, Z
    20ec:	71 81       	ldd	r23, Z+1	; 0x01
    20ee:	82 81       	ldd	r24, Z+2	; 0x02
    20f0:	93 81       	ldd	r25, Z+3	; 0x03
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	3f ef       	ldi	r19, 0xFF	; 255
    20f6:	4f e7       	ldi	r20, 0x7F	; 127
    20f8:	57 e4       	ldi	r21, 0x47	; 71
    20fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20fe:	18 16       	cp	r1, r24
    2100:	0c f0       	brlt	.+2      	; 0x2104 <main+0x1f4>
    2102:	43 c0       	rjmp	.+134    	; 0x218a <main+0x27a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2104:	fe 01       	movw	r30, r28
    2106:	e3 59       	subi	r30, 0x93	; 147
    2108:	ff 4f       	sbci	r31, 0xFF	; 255
    210a:	60 81       	ld	r22, Z
    210c:	71 81       	ldd	r23, Z+1	; 0x01
    210e:	82 81       	ldd	r24, Z+2	; 0x02
    2110:	93 81       	ldd	r25, Z+3	; 0x03
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	40 e2       	ldi	r20, 0x20	; 32
    2118:	51 e4       	ldi	r21, 0x41	; 65
    211a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	8e 01       	movw	r16, r28
    2124:	09 59       	subi	r16, 0x99	; 153
    2126:	1f 4f       	sbci	r17, 0xFF	; 255
    2128:	bc 01       	movw	r22, r24
    212a:	cd 01       	movw	r24, r26
    212c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2130:	dc 01       	movw	r26, r24
    2132:	cb 01       	movw	r24, r22
    2134:	f8 01       	movw	r30, r16
    2136:	91 83       	std	Z+1, r25	; 0x01
    2138:	80 83       	st	Z, r24
    213a:	1f c0       	rjmp	.+62     	; 0x217a <main+0x26a>
    213c:	fe 01       	movw	r30, r28
    213e:	eb 59       	subi	r30, 0x9B	; 155
    2140:	ff 4f       	sbci	r31, 0xFF	; 255
    2142:	89 e1       	ldi	r24, 0x19	; 25
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	91 83       	std	Z+1, r25	; 0x01
    2148:	80 83       	st	Z, r24
    214a:	fe 01       	movw	r30, r28
    214c:	eb 59       	subi	r30, 0x9B	; 155
    214e:	ff 4f       	sbci	r31, 0xFF	; 255
    2150:	80 81       	ld	r24, Z
    2152:	91 81       	ldd	r25, Z+1	; 0x01
    2154:	01 97       	sbiw	r24, 0x01	; 1
    2156:	f1 f7       	brne	.-4      	; 0x2154 <main+0x244>
    2158:	fe 01       	movw	r30, r28
    215a:	eb 59       	subi	r30, 0x9B	; 155
    215c:	ff 4f       	sbci	r31, 0xFF	; 255
    215e:	91 83       	std	Z+1, r25	; 0x01
    2160:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2162:	de 01       	movw	r26, r28
    2164:	a9 59       	subi	r26, 0x99	; 153
    2166:	bf 4f       	sbci	r27, 0xFF	; 255
    2168:	fe 01       	movw	r30, r28
    216a:	e9 59       	subi	r30, 0x99	; 153
    216c:	ff 4f       	sbci	r31, 0xFF	; 255
    216e:	80 81       	ld	r24, Z
    2170:	91 81       	ldd	r25, Z+1	; 0x01
    2172:	01 97       	sbiw	r24, 0x01	; 1
    2174:	11 96       	adiw	r26, 0x01	; 1
    2176:	9c 93       	st	X, r25
    2178:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    217a:	fe 01       	movw	r30, r28
    217c:	e9 59       	subi	r30, 0x99	; 153
    217e:	ff 4f       	sbci	r31, 0xFF	; 255
    2180:	80 81       	ld	r24, Z
    2182:	91 81       	ldd	r25, Z+1	; 0x01
    2184:	00 97       	sbiw	r24, 0x00	; 0
    2186:	d1 f6       	brne	.-76     	; 0x213c <main+0x22c>
    2188:	19 c4       	rjmp	.+2098   	; 0x29bc <main+0xaac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    218a:	8e 01       	movw	r16, r28
    218c:	09 59       	subi	r16, 0x99	; 153
    218e:	1f 4f       	sbci	r17, 0xFF	; 255
    2190:	fe 01       	movw	r30, r28
    2192:	e7 59       	subi	r30, 0x97	; 151
    2194:	ff 4f       	sbci	r31, 0xFF	; 255
    2196:	60 81       	ld	r22, Z
    2198:	71 81       	ldd	r23, Z+1	; 0x01
    219a:	82 81       	ldd	r24, Z+2	; 0x02
    219c:	93 81       	ldd	r25, Z+3	; 0x03
    219e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	f8 01       	movw	r30, r16
    21a8:	91 83       	std	Z+1, r25	; 0x01
    21aa:	80 83       	st	Z, r24
    21ac:	de 01       	movw	r26, r28
    21ae:	ad 59       	subi	r26, 0x9D	; 157
    21b0:	bf 4f       	sbci	r27, 0xFF	; 255
    21b2:	fe 01       	movw	r30, r28
    21b4:	e9 59       	subi	r30, 0x99	; 153
    21b6:	ff 4f       	sbci	r31, 0xFF	; 255
    21b8:	80 81       	ld	r24, Z
    21ba:	91 81       	ldd	r25, Z+1	; 0x01
    21bc:	11 96       	adiw	r26, 0x01	; 1
    21be:	9c 93       	st	X, r25
    21c0:	8e 93       	st	-X, r24
    21c2:	fe 01       	movw	r30, r28
    21c4:	ed 59       	subi	r30, 0x9D	; 157
    21c6:	ff 4f       	sbci	r31, 0xFF	; 255
    21c8:	80 81       	ld	r24, Z
    21ca:	91 81       	ldd	r25, Z+1	; 0x01
    21cc:	01 97       	sbiw	r24, 0x01	; 1
    21ce:	f1 f7       	brne	.-4      	; 0x21cc <main+0x2bc>
    21d0:	fe 01       	movw	r30, r28
    21d2:	ed 59       	subi	r30, 0x9D	; 157
    21d4:	ff 4f       	sbci	r31, 0xFF	; 255
    21d6:	91 83       	std	Z+1, r25	; 0x01
    21d8:	80 83       	st	Z, r24
    21da:	f0 c3       	rjmp	.+2016   	; 0x29bc <main+0xaac>
							_delay_ms(1500);
						} else if(key == '2') { // Changing the password
    21dc:	fe 01       	movw	r30, r28
    21de:	ed 58       	subi	r30, 0x8D	; 141
    21e0:	ff 4f       	sbci	r31, 0xFF	; 255
    21e2:	80 81       	ld	r24, Z
    21e4:	82 33       	cpi	r24, 0x32	; 50
    21e6:	09 f0       	breq	.+2      	; 0x21ea <main+0x2da>
    21e8:	c6 c0       	rjmp	.+396    	; 0x2376 <main+0x466>
							LCD_sendCommand(CLEAR_COMMAND);
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_sendCommand>
							LCD_displayString("Max 8 numbers");
    21f0:	8c e9       	ldi	r24, 0x9C	; 156
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_displayString>
    21f8:	fe 01       	movw	r30, r28
    21fa:	e1 5a       	subi	r30, 0xA1	; 161
    21fc:	ff 4f       	sbci	r31, 0xFF	; 255
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	aa ef       	ldi	r26, 0xFA	; 250
    2204:	b3 e4       	ldi	r27, 0x43	; 67
    2206:	80 83       	st	Z, r24
    2208:	91 83       	std	Z+1, r25	; 0x01
    220a:	a2 83       	std	Z+2, r26	; 0x02
    220c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    220e:	8e 01       	movw	r16, r28
    2210:	05 5a       	subi	r16, 0xA5	; 165
    2212:	1f 4f       	sbci	r17, 0xFF	; 255
    2214:	fe 01       	movw	r30, r28
    2216:	e1 5a       	subi	r30, 0xA1	; 161
    2218:	ff 4f       	sbci	r31, 0xFF	; 255
    221a:	60 81       	ld	r22, Z
    221c:	71 81       	ldd	r23, Z+1	; 0x01
    221e:	82 81       	ldd	r24, Z+2	; 0x02
    2220:	93 81       	ldd	r25, Z+3	; 0x03
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	4a e7       	ldi	r20, 0x7A	; 122
    2228:	53 e4       	ldi	r21, 0x43	; 67
    222a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	f8 01       	movw	r30, r16
    2234:	80 83       	st	Z, r24
    2236:	91 83       	std	Z+1, r25	; 0x01
    2238:	a2 83       	std	Z+2, r26	; 0x02
    223a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    223c:	fe 01       	movw	r30, r28
    223e:	e5 5a       	subi	r30, 0xA5	; 165
    2240:	ff 4f       	sbci	r31, 0xFF	; 255
    2242:	60 81       	ld	r22, Z
    2244:	71 81       	ldd	r23, Z+1	; 0x01
    2246:	82 81       	ldd	r24, Z+2	; 0x02
    2248:	93 81       	ldd	r25, Z+3	; 0x03
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	40 e8       	ldi	r20, 0x80	; 128
    2250:	5f e3       	ldi	r21, 0x3F	; 63
    2252:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2256:	88 23       	and	r24, r24
    2258:	44 f4       	brge	.+16     	; 0x226a <main+0x35a>
		__ticks = 1;
    225a:	fe 01       	movw	r30, r28
    225c:	e7 5a       	subi	r30, 0xA7	; 167
    225e:	ff 4f       	sbci	r31, 0xFF	; 255
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	91 83       	std	Z+1, r25	; 0x01
    2266:	80 83       	st	Z, r24
    2268:	64 c0       	rjmp	.+200    	; 0x2332 <main+0x422>
	else if (__tmp > 65535)
    226a:	fe 01       	movw	r30, r28
    226c:	e5 5a       	subi	r30, 0xA5	; 165
    226e:	ff 4f       	sbci	r31, 0xFF	; 255
    2270:	60 81       	ld	r22, Z
    2272:	71 81       	ldd	r23, Z+1	; 0x01
    2274:	82 81       	ldd	r24, Z+2	; 0x02
    2276:	93 81       	ldd	r25, Z+3	; 0x03
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	3f ef       	ldi	r19, 0xFF	; 255
    227c:	4f e7       	ldi	r20, 0x7F	; 127
    227e:	57 e4       	ldi	r21, 0x47	; 71
    2280:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2284:	18 16       	cp	r1, r24
    2286:	0c f0       	brlt	.+2      	; 0x228a <main+0x37a>
    2288:	43 c0       	rjmp	.+134    	; 0x2310 <main+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    228a:	fe 01       	movw	r30, r28
    228c:	e1 5a       	subi	r30, 0xA1	; 161
    228e:	ff 4f       	sbci	r31, 0xFF	; 255
    2290:	60 81       	ld	r22, Z
    2292:	71 81       	ldd	r23, Z+1	; 0x01
    2294:	82 81       	ldd	r24, Z+2	; 0x02
    2296:	93 81       	ldd	r25, Z+3	; 0x03
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	40 e2       	ldi	r20, 0x20	; 32
    229e:	51 e4       	ldi	r21, 0x41	; 65
    22a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	8e 01       	movw	r16, r28
    22aa:	07 5a       	subi	r16, 0xA7	; 167
    22ac:	1f 4f       	sbci	r17, 0xFF	; 255
    22ae:	bc 01       	movw	r22, r24
    22b0:	cd 01       	movw	r24, r26
    22b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	f8 01       	movw	r30, r16
    22bc:	91 83       	std	Z+1, r25	; 0x01
    22be:	80 83       	st	Z, r24
    22c0:	1f c0       	rjmp	.+62     	; 0x2300 <main+0x3f0>
    22c2:	fe 01       	movw	r30, r28
    22c4:	e9 5a       	subi	r30, 0xA9	; 169
    22c6:	ff 4f       	sbci	r31, 0xFF	; 255
    22c8:	89 e1       	ldi	r24, 0x19	; 25
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	91 83       	std	Z+1, r25	; 0x01
    22ce:	80 83       	st	Z, r24
    22d0:	fe 01       	movw	r30, r28
    22d2:	e9 5a       	subi	r30, 0xA9	; 169
    22d4:	ff 4f       	sbci	r31, 0xFF	; 255
    22d6:	80 81       	ld	r24, Z
    22d8:	91 81       	ldd	r25, Z+1	; 0x01
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	f1 f7       	brne	.-4      	; 0x22da <main+0x3ca>
    22de:	fe 01       	movw	r30, r28
    22e0:	e9 5a       	subi	r30, 0xA9	; 169
    22e2:	ff 4f       	sbci	r31, 0xFF	; 255
    22e4:	91 83       	std	Z+1, r25	; 0x01
    22e6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e8:	de 01       	movw	r26, r28
    22ea:	a7 5a       	subi	r26, 0xA7	; 167
    22ec:	bf 4f       	sbci	r27, 0xFF	; 255
    22ee:	fe 01       	movw	r30, r28
    22f0:	e7 5a       	subi	r30, 0xA7	; 167
    22f2:	ff 4f       	sbci	r31, 0xFF	; 255
    22f4:	80 81       	ld	r24, Z
    22f6:	91 81       	ldd	r25, Z+1	; 0x01
    22f8:	01 97       	sbiw	r24, 0x01	; 1
    22fa:	11 96       	adiw	r26, 0x01	; 1
    22fc:	9c 93       	st	X, r25
    22fe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2300:	fe 01       	movw	r30, r28
    2302:	e7 5a       	subi	r30, 0xA7	; 167
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	80 81       	ld	r24, Z
    2308:	91 81       	ldd	r25, Z+1	; 0x01
    230a:	00 97       	sbiw	r24, 0x00	; 0
    230c:	d1 f6       	brne	.-76     	; 0x22c2 <main+0x3b2>
    230e:	27 c0       	rjmp	.+78     	; 0x235e <main+0x44e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2310:	8e 01       	movw	r16, r28
    2312:	07 5a       	subi	r16, 0xA7	; 167
    2314:	1f 4f       	sbci	r17, 0xFF	; 255
    2316:	fe 01       	movw	r30, r28
    2318:	e5 5a       	subi	r30, 0xA5	; 165
    231a:	ff 4f       	sbci	r31, 0xFF	; 255
    231c:	60 81       	ld	r22, Z
    231e:	71 81       	ldd	r23, Z+1	; 0x01
    2320:	82 81       	ldd	r24, Z+2	; 0x02
    2322:	93 81       	ldd	r25, Z+3	; 0x03
    2324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2328:	dc 01       	movw	r26, r24
    232a:	cb 01       	movw	r24, r22
    232c:	f8 01       	movw	r30, r16
    232e:	91 83       	std	Z+1, r25	; 0x01
    2330:	80 83       	st	Z, r24
    2332:	de 01       	movw	r26, r28
    2334:	ab 5a       	subi	r26, 0xAB	; 171
    2336:	bf 4f       	sbci	r27, 0xFF	; 255
    2338:	fe 01       	movw	r30, r28
    233a:	e7 5a       	subi	r30, 0xA7	; 167
    233c:	ff 4f       	sbci	r31, 0xFF	; 255
    233e:	80 81       	ld	r24, Z
    2340:	91 81       	ldd	r25, Z+1	; 0x01
    2342:	8d 93       	st	X+, r24
    2344:	9c 93       	st	X, r25
    2346:	fe 01       	movw	r30, r28
    2348:	eb 5a       	subi	r30, 0xAB	; 171
    234a:	ff 4f       	sbci	r31, 0xFF	; 255
    234c:	80 81       	ld	r24, Z
    234e:	91 81       	ldd	r25, Z+1	; 0x01
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	f1 f7       	brne	.-4      	; 0x2350 <main+0x440>
    2354:	fe 01       	movw	r30, r28
    2356:	eb 5a       	subi	r30, 0xAB	; 171
    2358:	ff 4f       	sbci	r31, 0xFF	; 255
    235a:	91 83       	std	Z+1, r25	; 0x01
    235c:	80 83       	st	Z, r24
							_delay_ms(500);
							LCD_sendCommand(CLEAR_COMMAND);
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_sendCommand>
							LCD_sendCommand(CURSOR_ON);
    2364:	8e e0       	ldi	r24, 0x0E	; 14
    2366:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_sendCommand>
							change = TRUE; // To change the password in the next iteration
    236a:	fe 01       	movw	r30, r28
    236c:	ee 58       	subi	r30, 0x8E	; 142
    236e:	ff 4f       	sbci	r31, 0xFF	; 255
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	80 83       	st	Z, r24
    2374:	23 c3       	rjmp	.+1606   	; 0x29bc <main+0xaac>
						} else { // Entering invalid input
							LCD_sendCommand(CLEAR_COMMAND);
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_sendCommand>
							LCD_sendCommand(CURSOR_OFF);
    237c:	8c e0       	ldi	r24, 0x0C	; 12
    237e:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_sendCommand>
							LCD_displayStringRowColumn(1, 1, "Invalid input!");
    2382:	2a ea       	ldi	r18, 0xAA	; 170
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	61 e0       	ldi	r22, 0x01	; 1
    238a:	a9 01       	movw	r20, r18
    238c:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <LCD_displayStringRowColumn>
							i = key = 0;
    2390:	fe 01       	movw	r30, r28
    2392:	ed 58       	subi	r30, 0x8D	; 141
    2394:	ff 4f       	sbci	r31, 0xFF	; 255
    2396:	10 82       	st	Z, r1
    2398:	de 01       	movw	r26, r28
    239a:	af 58       	subi	r26, 0x8F	; 143
    239c:	bf 4f       	sbci	r27, 0xFF	; 255
    239e:	fe 01       	movw	r30, r28
    23a0:	ed 58       	subi	r30, 0x8D	; 141
    23a2:	ff 4f       	sbci	r31, 0xFF	; 255
    23a4:	80 81       	ld	r24, Z
    23a6:	8c 93       	st	X, r24
    23a8:	fe 01       	movw	r30, r28
    23aa:	ef 5a       	subi	r30, 0xAF	; 175
    23ac:	ff 4f       	sbci	r31, 0xFF	; 255
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	aa e7       	ldi	r26, 0x7A	; 122
    23b4:	b4 e4       	ldi	r27, 0x44	; 68
    23b6:	80 83       	st	Z, r24
    23b8:	91 83       	std	Z+1, r25	; 0x01
    23ba:	a2 83       	std	Z+2, r26	; 0x02
    23bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23be:	8e 01       	movw	r16, r28
    23c0:	03 5b       	subi	r16, 0xB3	; 179
    23c2:	1f 4f       	sbci	r17, 0xFF	; 255
    23c4:	fe 01       	movw	r30, r28
    23c6:	ef 5a       	subi	r30, 0xAF	; 175
    23c8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ca:	60 81       	ld	r22, Z
    23cc:	71 81       	ldd	r23, Z+1	; 0x01
    23ce:	82 81       	ldd	r24, Z+2	; 0x02
    23d0:	93 81       	ldd	r25, Z+3	; 0x03
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	4a e7       	ldi	r20, 0x7A	; 122
    23d8:	53 e4       	ldi	r21, 0x43	; 67
    23da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	f8 01       	movw	r30, r16
    23e4:	80 83       	st	Z, r24
    23e6:	91 83       	std	Z+1, r25	; 0x01
    23e8:	a2 83       	std	Z+2, r26	; 0x02
    23ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23ec:	fe 01       	movw	r30, r28
    23ee:	e3 5b       	subi	r30, 0xB3	; 179
    23f0:	ff 4f       	sbci	r31, 0xFF	; 255
    23f2:	60 81       	ld	r22, Z
    23f4:	71 81       	ldd	r23, Z+1	; 0x01
    23f6:	82 81       	ldd	r24, Z+2	; 0x02
    23f8:	93 81       	ldd	r25, Z+3	; 0x03
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	40 e8       	ldi	r20, 0x80	; 128
    2400:	5f e3       	ldi	r21, 0x3F	; 63
    2402:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2406:	88 23       	and	r24, r24
    2408:	44 f4       	brge	.+16     	; 0x241a <main+0x50a>
		__ticks = 1;
    240a:	fe 01       	movw	r30, r28
    240c:	e5 5b       	subi	r30, 0xB5	; 181
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	91 83       	std	Z+1, r25	; 0x01
    2416:	80 83       	st	Z, r24
    2418:	64 c0       	rjmp	.+200    	; 0x24e2 <main+0x5d2>
	else if (__tmp > 65535)
    241a:	fe 01       	movw	r30, r28
    241c:	e3 5b       	subi	r30, 0xB3	; 179
    241e:	ff 4f       	sbci	r31, 0xFF	; 255
    2420:	60 81       	ld	r22, Z
    2422:	71 81       	ldd	r23, Z+1	; 0x01
    2424:	82 81       	ldd	r24, Z+2	; 0x02
    2426:	93 81       	ldd	r25, Z+3	; 0x03
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	3f ef       	ldi	r19, 0xFF	; 255
    242c:	4f e7       	ldi	r20, 0x7F	; 127
    242e:	57 e4       	ldi	r21, 0x47	; 71
    2430:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2434:	18 16       	cp	r1, r24
    2436:	0c f0       	brlt	.+2      	; 0x243a <main+0x52a>
    2438:	43 c0       	rjmp	.+134    	; 0x24c0 <main+0x5b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    243a:	fe 01       	movw	r30, r28
    243c:	ef 5a       	subi	r30, 0xAF	; 175
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	60 81       	ld	r22, Z
    2442:	71 81       	ldd	r23, Z+1	; 0x01
    2444:	82 81       	ldd	r24, Z+2	; 0x02
    2446:	93 81       	ldd	r25, Z+3	; 0x03
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	40 e2       	ldi	r20, 0x20	; 32
    244e:	51 e4       	ldi	r21, 0x41	; 65
    2450:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	8e 01       	movw	r16, r28
    245a:	05 5b       	subi	r16, 0xB5	; 181
    245c:	1f 4f       	sbci	r17, 0xFF	; 255
    245e:	bc 01       	movw	r22, r24
    2460:	cd 01       	movw	r24, r26
    2462:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	f8 01       	movw	r30, r16
    246c:	91 83       	std	Z+1, r25	; 0x01
    246e:	80 83       	st	Z, r24
    2470:	1f c0       	rjmp	.+62     	; 0x24b0 <main+0x5a0>
    2472:	fe 01       	movw	r30, r28
    2474:	e7 5b       	subi	r30, 0xB7	; 183
    2476:	ff 4f       	sbci	r31, 0xFF	; 255
    2478:	89 e1       	ldi	r24, 0x19	; 25
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	91 83       	std	Z+1, r25	; 0x01
    247e:	80 83       	st	Z, r24
    2480:	fe 01       	movw	r30, r28
    2482:	e7 5b       	subi	r30, 0xB7	; 183
    2484:	ff 4f       	sbci	r31, 0xFF	; 255
    2486:	80 81       	ld	r24, Z
    2488:	91 81       	ldd	r25, Z+1	; 0x01
    248a:	01 97       	sbiw	r24, 0x01	; 1
    248c:	f1 f7       	brne	.-4      	; 0x248a <main+0x57a>
    248e:	fe 01       	movw	r30, r28
    2490:	e7 5b       	subi	r30, 0xB7	; 183
    2492:	ff 4f       	sbci	r31, 0xFF	; 255
    2494:	91 83       	std	Z+1, r25	; 0x01
    2496:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2498:	de 01       	movw	r26, r28
    249a:	a5 5b       	subi	r26, 0xB5	; 181
    249c:	bf 4f       	sbci	r27, 0xFF	; 255
    249e:	fe 01       	movw	r30, r28
    24a0:	e5 5b       	subi	r30, 0xB5	; 181
    24a2:	ff 4f       	sbci	r31, 0xFF	; 255
    24a4:	80 81       	ld	r24, Z
    24a6:	91 81       	ldd	r25, Z+1	; 0x01
    24a8:	01 97       	sbiw	r24, 0x01	; 1
    24aa:	11 96       	adiw	r26, 0x01	; 1
    24ac:	9c 93       	st	X, r25
    24ae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b0:	fe 01       	movw	r30, r28
    24b2:	e5 5b       	subi	r30, 0xB5	; 181
    24b4:	ff 4f       	sbci	r31, 0xFF	; 255
    24b6:	80 81       	ld	r24, Z
    24b8:	91 81       	ldd	r25, Z+1	; 0x01
    24ba:	00 97       	sbiw	r24, 0x00	; 0
    24bc:	d1 f6       	brne	.-76     	; 0x2472 <main+0x562>
    24be:	7e c2       	rjmp	.+1276   	; 0x29bc <main+0xaac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c0:	8e 01       	movw	r16, r28
    24c2:	05 5b       	subi	r16, 0xB5	; 181
    24c4:	1f 4f       	sbci	r17, 0xFF	; 255
    24c6:	fe 01       	movw	r30, r28
    24c8:	e3 5b       	subi	r30, 0xB3	; 179
    24ca:	ff 4f       	sbci	r31, 0xFF	; 255
    24cc:	60 81       	ld	r22, Z
    24ce:	71 81       	ldd	r23, Z+1	; 0x01
    24d0:	82 81       	ldd	r24, Z+2	; 0x02
    24d2:	93 81       	ldd	r25, Z+3	; 0x03
    24d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	f8 01       	movw	r30, r16
    24de:	91 83       	std	Z+1, r25	; 0x01
    24e0:	80 83       	st	Z, r24
    24e2:	de 01       	movw	r26, r28
    24e4:	a9 5b       	subi	r26, 0xB9	; 185
    24e6:	bf 4f       	sbci	r27, 0xFF	; 255
    24e8:	fe 01       	movw	r30, r28
    24ea:	e5 5b       	subi	r30, 0xB5	; 181
    24ec:	ff 4f       	sbci	r31, 0xFF	; 255
    24ee:	80 81       	ld	r24, Z
    24f0:	91 81       	ldd	r25, Z+1	; 0x01
    24f2:	11 96       	adiw	r26, 0x01	; 1
    24f4:	9c 93       	st	X, r25
    24f6:	8e 93       	st	-X, r24
    24f8:	fe 01       	movw	r30, r28
    24fa:	e9 5b       	subi	r30, 0xB9	; 185
    24fc:	ff 4f       	sbci	r31, 0xFF	; 255
    24fe:	80 81       	ld	r24, Z
    2500:	91 81       	ldd	r25, Z+1	; 0x01
    2502:	01 97       	sbiw	r24, 0x01	; 1
    2504:	f1 f7       	brne	.-4      	; 0x2502 <main+0x5f2>
    2506:	fe 01       	movw	r30, r28
    2508:	e9 5b       	subi	r30, 0xB9	; 185
    250a:	ff 4f       	sbci	r31, 0xFF	; 255
    250c:	91 83       	std	Z+1, r25	; 0x01
    250e:	80 83       	st	Z, r24
    2510:	55 c2       	rjmp	.+1194   	; 0x29bc <main+0xaac>
							_delay_ms(1000);
						}
					} else { // Password is wrong
						if(count == -3) { // Too many attempts
    2512:	80 91 1e 01 	lds	r24, 0x011E
    2516:	8d 3f       	cpi	r24, 0xFD	; 253
    2518:	09 f0       	breq	.+2      	; 0x251c <main+0x60c>
    251a:	b9 c0       	rjmp	.+370    	; 0x268e <main+0x77e>
							count = 0;
    251c:	10 92 1e 01 	sts	0x011E, r1
							LCD_sendCommand(CLEAR_COMMAND);
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_sendCommand>
							LCD_displayString("Too many wrong  attempts");
    2526:	89 eb       	ldi	r24, 0xB9	; 185
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_displayString>
    252e:	fe 01       	movw	r30, r28
    2530:	ed 5b       	subi	r30, 0xBD	; 189
    2532:	ff 4f       	sbci	r31, 0xFF	; 255
    2534:	80 e0       	ldi	r24, 0x00	; 0
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	aa ef       	ldi	r26, 0xFA	; 250
    253a:	b3 e4       	ldi	r27, 0x43	; 67
    253c:	80 83       	st	Z, r24
    253e:	91 83       	std	Z+1, r25	; 0x01
    2540:	a2 83       	std	Z+2, r26	; 0x02
    2542:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2544:	8e 01       	movw	r16, r28
    2546:	01 5c       	subi	r16, 0xC1	; 193
    2548:	1f 4f       	sbci	r17, 0xFF	; 255
    254a:	fe 01       	movw	r30, r28
    254c:	ed 5b       	subi	r30, 0xBD	; 189
    254e:	ff 4f       	sbci	r31, 0xFF	; 255
    2550:	60 81       	ld	r22, Z
    2552:	71 81       	ldd	r23, Z+1	; 0x01
    2554:	82 81       	ldd	r24, Z+2	; 0x02
    2556:	93 81       	ldd	r25, Z+3	; 0x03
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	4a e7       	ldi	r20, 0x7A	; 122
    255e:	53 e4       	ldi	r21, 0x43	; 67
    2560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2564:	dc 01       	movw	r26, r24
    2566:	cb 01       	movw	r24, r22
    2568:	f8 01       	movw	r30, r16
    256a:	80 83       	st	Z, r24
    256c:	91 83       	std	Z+1, r25	; 0x01
    256e:	a2 83       	std	Z+2, r26	; 0x02
    2570:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2572:	fe 01       	movw	r30, r28
    2574:	ff 96       	adiw	r30, 0x3f	; 63
    2576:	60 81       	ld	r22, Z
    2578:	71 81       	ldd	r23, Z+1	; 0x01
    257a:	82 81       	ldd	r24, Z+2	; 0x02
    257c:	93 81       	ldd	r25, Z+3	; 0x03
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	40 e8       	ldi	r20, 0x80	; 128
    2584:	5f e3       	ldi	r21, 0x3F	; 63
    2586:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    258a:	88 23       	and	r24, r24
    258c:	2c f4       	brge	.+10     	; 0x2598 <main+0x688>
		__ticks = 1;
    258e:	81 e0       	ldi	r24, 0x01	; 1
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	9e af       	std	Y+62, r25	; 0x3e
    2594:	8d af       	std	Y+61, r24	; 0x3d
    2596:	46 c0       	rjmp	.+140    	; 0x2624 <main+0x714>
	else if (__tmp > 65535)
    2598:	fe 01       	movw	r30, r28
    259a:	ff 96       	adiw	r30, 0x3f	; 63
    259c:	60 81       	ld	r22, Z
    259e:	71 81       	ldd	r23, Z+1	; 0x01
    25a0:	82 81       	ldd	r24, Z+2	; 0x02
    25a2:	93 81       	ldd	r25, Z+3	; 0x03
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	3f ef       	ldi	r19, 0xFF	; 255
    25a8:	4f e7       	ldi	r20, 0x7F	; 127
    25aa:	57 e4       	ldi	r21, 0x47	; 71
    25ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25b0:	18 16       	cp	r1, r24
    25b2:	64 f5       	brge	.+88     	; 0x260c <main+0x6fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b4:	fe 01       	movw	r30, r28
    25b6:	ed 5b       	subi	r30, 0xBD	; 189
    25b8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ba:	60 81       	ld	r22, Z
    25bc:	71 81       	ldd	r23, Z+1	; 0x01
    25be:	82 81       	ldd	r24, Z+2	; 0x02
    25c0:	93 81       	ldd	r25, Z+3	; 0x03
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	40 e2       	ldi	r20, 0x20	; 32
    25c8:	51 e4       	ldi	r21, 0x41	; 65
    25ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ce:	dc 01       	movw	r26, r24
    25d0:	cb 01       	movw	r24, r22
    25d2:	bc 01       	movw	r22, r24
    25d4:	cd 01       	movw	r24, r26
    25d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	9e af       	std	Y+62, r25	; 0x3e
    25e0:	8d af       	std	Y+61, r24	; 0x3d
    25e2:	0f c0       	rjmp	.+30     	; 0x2602 <main+0x6f2>
    25e4:	89 e1       	ldi	r24, 0x19	; 25
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	9c af       	std	Y+60, r25	; 0x3c
    25ea:	8b af       	std	Y+59, r24	; 0x3b
    25ec:	8b ad       	ldd	r24, Y+59	; 0x3b
    25ee:	9c ad       	ldd	r25, Y+60	; 0x3c
    25f0:	01 97       	sbiw	r24, 0x01	; 1
    25f2:	f1 f7       	brne	.-4      	; 0x25f0 <main+0x6e0>
    25f4:	9c af       	std	Y+60, r25	; 0x3c
    25f6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    25fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    25fc:	01 97       	sbiw	r24, 0x01	; 1
    25fe:	9e af       	std	Y+62, r25	; 0x3e
    2600:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2602:	8d ad       	ldd	r24, Y+61	; 0x3d
    2604:	9e ad       	ldd	r25, Y+62	; 0x3e
    2606:	00 97       	sbiw	r24, 0x00	; 0
    2608:	69 f7       	brne	.-38     	; 0x25e4 <main+0x6d4>
    260a:	16 c0       	rjmp	.+44     	; 0x2638 <main+0x728>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    260c:	fe 01       	movw	r30, r28
    260e:	ff 96       	adiw	r30, 0x3f	; 63
    2610:	60 81       	ld	r22, Z
    2612:	71 81       	ldd	r23, Z+1	; 0x01
    2614:	82 81       	ldd	r24, Z+2	; 0x02
    2616:	93 81       	ldd	r25, Z+3	; 0x03
    2618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	9e af       	std	Y+62, r25	; 0x3e
    2622:	8d af       	std	Y+61, r24	; 0x3d
    2624:	8d ad       	ldd	r24, Y+61	; 0x3d
    2626:	9e ad       	ldd	r25, Y+62	; 0x3e
    2628:	9a af       	std	Y+58, r25	; 0x3a
    262a:	89 af       	std	Y+57, r24	; 0x39
    262c:	89 ad       	ldd	r24, Y+57	; 0x39
    262e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2630:	01 97       	sbiw	r24, 0x01	; 1
    2632:	f1 f7       	brne	.-4      	; 0x2630 <main+0x720>
    2634:	9a af       	std	Y+58, r25	; 0x3a
    2636:	89 af       	std	Y+57, r24	; 0x39
							_delay_ms(500);
							LCD_sendCommand(CLEAR_COMMAND);
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_sendCommand>
							LCD_displayString(" Wait for timer");
    263e:	82 ed       	ldi	r24, 0xD2	; 210
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_displayString>
							LCD_sendCommand(CURSOR_OFF);
    2646:	8c e0       	ldi	r24, 0x0C	; 12
    2648:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_sendCommand>
							LCD_goToRowColumn(1, 6);
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	66 e0       	ldi	r22, 0x06	; 6
    2650:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_goToRowColumn>
							LCD_intgerToString(sec);
    2654:	80 91 1c 01 	lds	r24, 0x011C
    2658:	88 2f       	mov	r24, r24
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <LCD_intgerToString>
							TIMSK |= (1 << OCIE0); // Open timer
    2660:	a9 e5       	ldi	r26, 0x59	; 89
    2662:	b0 e0       	ldi	r27, 0x00	; 0
    2664:	e9 e5       	ldi	r30, 0x59	; 89
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	80 81       	ld	r24, Z
    266a:	82 60       	ori	r24, 0x02	; 2
    266c:	8c 93       	st	X, r24
							while(sec) {}
    266e:	80 91 1c 01 	lds	r24, 0x011C
    2672:	88 23       	and	r24, r24
    2674:	e1 f7       	brne	.-8      	; 0x266e <main+0x75e>
							sec = 30;
    2676:	8e e1       	ldi	r24, 0x1E	; 30
    2678:	80 93 1c 01 	sts	0x011C, r24
							TIMSK ^= (1 << OCIE0); // Close timer
    267c:	a9 e5       	ldi	r26, 0x59	; 89
    267e:	b0 e0       	ldi	r27, 0x00	; 0
    2680:	e9 e5       	ldi	r30, 0x59	; 89
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	90 81       	ld	r25, Z
    2686:	82 e0       	ldi	r24, 0x02	; 2
    2688:	89 27       	eor	r24, r25
    268a:	8c 93       	st	X, r24
    268c:	97 c1       	rjmp	.+814    	; 0x29bc <main+0xaac>
						} else { // didn't exceed 3 attempts
							LCD_sendCommand(CLEAR_COMMAND);
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_sendCommand>
							LCD_sendCommand(CURSOR_OFF);
    2694:	8c e0       	ldi	r24, 0x0C	; 12
    2696:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_sendCommand>
							LCD_displayStringRowColumn(1, 0, "Wrong  Password!");
    269a:	22 ee       	ldi	r18, 0xE2	; 226
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	60 e0       	ldi	r22, 0x00	; 0
    26a2:	a9 01       	movw	r20, r18
    26a4:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <LCD_displayStringRowColumn>
							count--;
    26a8:	80 91 1e 01 	lds	r24, 0x011E
    26ac:	81 50       	subi	r24, 0x01	; 1
    26ae:	80 93 1e 01 	sts	0x011E, r24
    26b2:	80 e0       	ldi	r24, 0x00	; 0
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	aa e7       	ldi	r26, 0x7A	; 122
    26b8:	b4 e4       	ldi	r27, 0x44	; 68
    26ba:	8d ab       	std	Y+53, r24	; 0x35
    26bc:	9e ab       	std	Y+54, r25	; 0x36
    26be:	af ab       	std	Y+55, r26	; 0x37
    26c0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c2:	6d a9       	ldd	r22, Y+53	; 0x35
    26c4:	7e a9       	ldd	r23, Y+54	; 0x36
    26c6:	8f a9       	ldd	r24, Y+55	; 0x37
    26c8:	98 ad       	ldd	r25, Y+56	; 0x38
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	4a e7       	ldi	r20, 0x7A	; 122
    26d0:	53 e4       	ldi	r21, 0x43	; 67
    26d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	89 ab       	std	Y+49, r24	; 0x31
    26dc:	9a ab       	std	Y+50, r25	; 0x32
    26de:	ab ab       	std	Y+51, r26	; 0x33
    26e0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    26e2:	69 a9       	ldd	r22, Y+49	; 0x31
    26e4:	7a a9       	ldd	r23, Y+50	; 0x32
    26e6:	8b a9       	ldd	r24, Y+51	; 0x33
    26e8:	9c a9       	ldd	r25, Y+52	; 0x34
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	40 e8       	ldi	r20, 0x80	; 128
    26f0:	5f e3       	ldi	r21, 0x3F	; 63
    26f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26f6:	88 23       	and	r24, r24
    26f8:	2c f4       	brge	.+10     	; 0x2704 <main+0x7f4>
		__ticks = 1;
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	98 ab       	std	Y+48, r25	; 0x30
    2700:	8f a7       	std	Y+47, r24	; 0x2f
    2702:	3f c0       	rjmp	.+126    	; 0x2782 <main+0x872>
	else if (__tmp > 65535)
    2704:	69 a9       	ldd	r22, Y+49	; 0x31
    2706:	7a a9       	ldd	r23, Y+50	; 0x32
    2708:	8b a9       	ldd	r24, Y+51	; 0x33
    270a:	9c a9       	ldd	r25, Y+52	; 0x34
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	3f ef       	ldi	r19, 0xFF	; 255
    2710:	4f e7       	ldi	r20, 0x7F	; 127
    2712:	57 e4       	ldi	r21, 0x47	; 71
    2714:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2718:	18 16       	cp	r1, r24
    271a:	4c f5       	brge	.+82     	; 0x276e <main+0x85e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    271c:	6d a9       	ldd	r22, Y+53	; 0x35
    271e:	7e a9       	ldd	r23, Y+54	; 0x36
    2720:	8f a9       	ldd	r24, Y+55	; 0x37
    2722:	98 ad       	ldd	r25, Y+56	; 0x38
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	40 e2       	ldi	r20, 0x20	; 32
    272a:	51 e4       	ldi	r21, 0x41	; 65
    272c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2730:	dc 01       	movw	r26, r24
    2732:	cb 01       	movw	r24, r22
    2734:	bc 01       	movw	r22, r24
    2736:	cd 01       	movw	r24, r26
    2738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	98 ab       	std	Y+48, r25	; 0x30
    2742:	8f a7       	std	Y+47, r24	; 0x2f
    2744:	0f c0       	rjmp	.+30     	; 0x2764 <main+0x854>
    2746:	89 e1       	ldi	r24, 0x19	; 25
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	9e a7       	std	Y+46, r25	; 0x2e
    274c:	8d a7       	std	Y+45, r24	; 0x2d
    274e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2750:	9e a5       	ldd	r25, Y+46	; 0x2e
    2752:	01 97       	sbiw	r24, 0x01	; 1
    2754:	f1 f7       	brne	.-4      	; 0x2752 <main+0x842>
    2756:	9e a7       	std	Y+46, r25	; 0x2e
    2758:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    275a:	8f a5       	ldd	r24, Y+47	; 0x2f
    275c:	98 a9       	ldd	r25, Y+48	; 0x30
    275e:	01 97       	sbiw	r24, 0x01	; 1
    2760:	98 ab       	std	Y+48, r25	; 0x30
    2762:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2764:	8f a5       	ldd	r24, Y+47	; 0x2f
    2766:	98 a9       	ldd	r25, Y+48	; 0x30
    2768:	00 97       	sbiw	r24, 0x00	; 0
    276a:	69 f7       	brne	.-38     	; 0x2746 <main+0x836>
    276c:	27 c1       	rjmp	.+590    	; 0x29bc <main+0xaac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    276e:	69 a9       	ldd	r22, Y+49	; 0x31
    2770:	7a a9       	ldd	r23, Y+50	; 0x32
    2772:	8b a9       	ldd	r24, Y+51	; 0x33
    2774:	9c a9       	ldd	r25, Y+52	; 0x34
    2776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	98 ab       	std	Y+48, r25	; 0x30
    2780:	8f a7       	std	Y+47, r24	; 0x2f
    2782:	8f a5       	ldd	r24, Y+47	; 0x2f
    2784:	98 a9       	ldd	r25, Y+48	; 0x30
    2786:	9c a7       	std	Y+44, r25	; 0x2c
    2788:	8b a7       	std	Y+43, r24	; 0x2b
    278a:	8b a5       	ldd	r24, Y+43	; 0x2b
    278c:	9c a5       	ldd	r25, Y+44	; 0x2c
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	f1 f7       	brne	.-4      	; 0x278e <main+0x87e>
    2792:	9c a7       	std	Y+44, r25	; 0x2c
    2794:	8b a7       	std	Y+43, r24	; 0x2b
    2796:	12 c1       	rjmp	.+548    	; 0x29bc <main+0xaac>
							_delay_ms(1000);
						}
					}
				} else { // Sending password after getting the number
					LCD_sendCommand(CLEAR_COMMAND);
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_sendCommand>
					LCD_sendCommand(CURSOR_OFF);
    279e:	8c e0       	ldi	r24, 0x0C	; 12
    27a0:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_sendCommand>
					LCD_displayStringRowColumn(0, 0, "Password changed");
    27a4:	23 ef       	ldi	r18, 0xF3	; 243
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	80 e0       	ldi	r24, 0x00	; 0
    27aa:	60 e0       	ldi	r22, 0x00	; 0
    27ac:	a9 01       	movw	r20, r18
    27ae:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(1, 1, "Successfully");
    27b2:	2f e8       	ldi	r18, 0x8F	; 143
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	61 e0       	ldi	r22, 0x01	; 1
    27ba:	a9 01       	movw	r20, r18
    27bc:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <LCD_displayStringRowColumn>
					change = FALSE;
    27c0:	fe 01       	movw	r30, r28
    27c2:	ee 58       	subi	r30, 0x8E	; 142
    27c4:	ff 4f       	sbci	r31, 0xFF	; 255
    27c6:	10 82       	st	Z, r1
    27c8:	80 e0       	ldi	r24, 0x00	; 0
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	aa e7       	ldi	r26, 0x7A	; 122
    27ce:	b4 e4       	ldi	r27, 0x44	; 68
    27d0:	8f a3       	std	Y+39, r24	; 0x27
    27d2:	98 a7       	std	Y+40, r25	; 0x28
    27d4:	a9 a7       	std	Y+41, r26	; 0x29
    27d6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d8:	6f a1       	ldd	r22, Y+39	; 0x27
    27da:	78 a5       	ldd	r23, Y+40	; 0x28
    27dc:	89 a5       	ldd	r24, Y+41	; 0x29
    27de:	9a a5       	ldd	r25, Y+42	; 0x2a
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	4a e7       	ldi	r20, 0x7A	; 122
    27e6:	53 e4       	ldi	r21, 0x43	; 67
    27e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ec:	dc 01       	movw	r26, r24
    27ee:	cb 01       	movw	r24, r22
    27f0:	8b a3       	std	Y+35, r24	; 0x23
    27f2:	9c a3       	std	Y+36, r25	; 0x24
    27f4:	ad a3       	std	Y+37, r26	; 0x25
    27f6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    27f8:	6b a1       	ldd	r22, Y+35	; 0x23
    27fa:	7c a1       	ldd	r23, Y+36	; 0x24
    27fc:	8d a1       	ldd	r24, Y+37	; 0x25
    27fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	40 e8       	ldi	r20, 0x80	; 128
    2806:	5f e3       	ldi	r21, 0x3F	; 63
    2808:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    280c:	88 23       	and	r24, r24
    280e:	2c f4       	brge	.+10     	; 0x281a <main+0x90a>
		__ticks = 1;
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	9a a3       	std	Y+34, r25	; 0x22
    2816:	89 a3       	std	Y+33, r24	; 0x21
    2818:	3f c0       	rjmp	.+126    	; 0x2898 <main+0x988>
	else if (__tmp > 65535)
    281a:	6b a1       	ldd	r22, Y+35	; 0x23
    281c:	7c a1       	ldd	r23, Y+36	; 0x24
    281e:	8d a1       	ldd	r24, Y+37	; 0x25
    2820:	9e a1       	ldd	r25, Y+38	; 0x26
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	3f ef       	ldi	r19, 0xFF	; 255
    2826:	4f e7       	ldi	r20, 0x7F	; 127
    2828:	57 e4       	ldi	r21, 0x47	; 71
    282a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    282e:	18 16       	cp	r1, r24
    2830:	4c f5       	brge	.+82     	; 0x2884 <main+0x974>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2832:	6f a1       	ldd	r22, Y+39	; 0x27
    2834:	78 a5       	ldd	r23, Y+40	; 0x28
    2836:	89 a5       	ldd	r24, Y+41	; 0x29
    2838:	9a a5       	ldd	r25, Y+42	; 0x2a
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	40 e2       	ldi	r20, 0x20	; 32
    2840:	51 e4       	ldi	r21, 0x41	; 65
    2842:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	bc 01       	movw	r22, r24
    284c:	cd 01       	movw	r24, r26
    284e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2852:	dc 01       	movw	r26, r24
    2854:	cb 01       	movw	r24, r22
    2856:	9a a3       	std	Y+34, r25	; 0x22
    2858:	89 a3       	std	Y+33, r24	; 0x21
    285a:	0f c0       	rjmp	.+30     	; 0x287a <main+0x96a>
    285c:	89 e1       	ldi	r24, 0x19	; 25
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	98 a3       	std	Y+32, r25	; 0x20
    2862:	8f 8f       	std	Y+31, r24	; 0x1f
    2864:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2866:	98 a1       	ldd	r25, Y+32	; 0x20
    2868:	01 97       	sbiw	r24, 0x01	; 1
    286a:	f1 f7       	brne	.-4      	; 0x2868 <main+0x958>
    286c:	98 a3       	std	Y+32, r25	; 0x20
    286e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2870:	89 a1       	ldd	r24, Y+33	; 0x21
    2872:	9a a1       	ldd	r25, Y+34	; 0x22
    2874:	01 97       	sbiw	r24, 0x01	; 1
    2876:	9a a3       	std	Y+34, r25	; 0x22
    2878:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    287a:	89 a1       	ldd	r24, Y+33	; 0x21
    287c:	9a a1       	ldd	r25, Y+34	; 0x22
    287e:	00 97       	sbiw	r24, 0x00	; 0
    2880:	69 f7       	brne	.-38     	; 0x285c <main+0x94c>
    2882:	9c c0       	rjmp	.+312    	; 0x29bc <main+0xaac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2884:	6b a1       	ldd	r22, Y+35	; 0x23
    2886:	7c a1       	ldd	r23, Y+36	; 0x24
    2888:	8d a1       	ldd	r24, Y+37	; 0x25
    288a:	9e a1       	ldd	r25, Y+38	; 0x26
    288c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	9a a3       	std	Y+34, r25	; 0x22
    2896:	89 a3       	std	Y+33, r24	; 0x21
    2898:	89 a1       	ldd	r24, Y+33	; 0x21
    289a:	9a a1       	ldd	r25, Y+34	; 0x22
    289c:	9e 8f       	std	Y+30, r25	; 0x1e
    289e:	8d 8f       	std	Y+29, r24	; 0x1d
    28a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28a4:	01 97       	sbiw	r24, 0x01	; 1
    28a6:	f1 f7       	brne	.-4      	; 0x28a4 <main+0x994>
    28a8:	9e 8f       	std	Y+30, r25	; 0x1e
    28aa:	8d 8f       	std	Y+29, r24	; 0x1d
    28ac:	87 c0       	rjmp	.+270    	; 0x29bc <main+0xaac>
					_delay_ms(1000);
				}
			} else if (key == '=' && i >= 10) {
    28ae:	fe 01       	movw	r30, r28
    28b0:	ed 58       	subi	r30, 0x8D	; 141
    28b2:	ff 4f       	sbci	r31, 0xFF	; 255
    28b4:	80 81       	ld	r24, Z
    28b6:	8d 33       	cpi	r24, 0x3D	; 61
    28b8:	09 f0       	breq	.+2      	; 0x28bc <main+0x9ac>
    28ba:	80 c0       	rjmp	.+256    	; 0x29bc <main+0xaac>
    28bc:	fe 01       	movw	r30, r28
    28be:	ef 58       	subi	r30, 0x8F	; 143
    28c0:	ff 4f       	sbci	r31, 0xFF	; 255
    28c2:	80 81       	ld	r24, Z
    28c4:	8a 30       	cpi	r24, 0x0A	; 10
    28c6:	08 f4       	brcc	.+2      	; 0x28ca <main+0x9ba>
    28c8:	79 c0       	rjmp	.+242    	; 0x29bc <main+0xaac>
				LCD_sendCommand(CLEAR_COMMAND);
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_sendCommand>
				LCD_displayString("Max 8 numbers");
    28d0:	8c e9       	ldi	r24, 0x9C	; 156
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_displayString>
    28d8:	80 e0       	ldi	r24, 0x00	; 0
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	aa ef       	ldi	r26, 0xFA	; 250
    28de:	b3 e4       	ldi	r27, 0x43	; 67
    28e0:	89 8f       	std	Y+25, r24	; 0x19
    28e2:	9a 8f       	std	Y+26, r25	; 0x1a
    28e4:	ab 8f       	std	Y+27, r26	; 0x1b
    28e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e8:	69 8d       	ldd	r22, Y+25	; 0x19
    28ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	4a e7       	ldi	r20, 0x7A	; 122
    28f6:	53 e4       	ldi	r21, 0x43	; 67
    28f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	8d 8b       	std	Y+21, r24	; 0x15
    2902:	9e 8b       	std	Y+22, r25	; 0x16
    2904:	af 8b       	std	Y+23, r26	; 0x17
    2906:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2908:	6d 89       	ldd	r22, Y+21	; 0x15
    290a:	7e 89       	ldd	r23, Y+22	; 0x16
    290c:	8f 89       	ldd	r24, Y+23	; 0x17
    290e:	98 8d       	ldd	r25, Y+24	; 0x18
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	40 e8       	ldi	r20, 0x80	; 128
    2916:	5f e3       	ldi	r21, 0x3F	; 63
    2918:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    291c:	88 23       	and	r24, r24
    291e:	2c f4       	brge	.+10     	; 0x292a <main+0xa1a>
		__ticks = 1;
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	9c 8b       	std	Y+20, r25	; 0x14
    2926:	8b 8b       	std	Y+19, r24	; 0x13
    2928:	3f c0       	rjmp	.+126    	; 0x29a8 <main+0xa98>
	else if (__tmp > 65535)
    292a:	6d 89       	ldd	r22, Y+21	; 0x15
    292c:	7e 89       	ldd	r23, Y+22	; 0x16
    292e:	8f 89       	ldd	r24, Y+23	; 0x17
    2930:	98 8d       	ldd	r25, Y+24	; 0x18
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	3f ef       	ldi	r19, 0xFF	; 255
    2936:	4f e7       	ldi	r20, 0x7F	; 127
    2938:	57 e4       	ldi	r21, 0x47	; 71
    293a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    293e:	18 16       	cp	r1, r24
    2940:	4c f5       	brge	.+82     	; 0x2994 <main+0xa84>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2942:	69 8d       	ldd	r22, Y+25	; 0x19
    2944:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2946:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2948:	9c 8d       	ldd	r25, Y+28	; 0x1c
    294a:	20 e0       	ldi	r18, 0x00	; 0
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	40 e2       	ldi	r20, 0x20	; 32
    2950:	51 e4       	ldi	r21, 0x41	; 65
    2952:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2956:	dc 01       	movw	r26, r24
    2958:	cb 01       	movw	r24, r22
    295a:	bc 01       	movw	r22, r24
    295c:	cd 01       	movw	r24, r26
    295e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	9c 8b       	std	Y+20, r25	; 0x14
    2968:	8b 8b       	std	Y+19, r24	; 0x13
    296a:	0f c0       	rjmp	.+30     	; 0x298a <main+0xa7a>
    296c:	89 e1       	ldi	r24, 0x19	; 25
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	9a 8b       	std	Y+18, r25	; 0x12
    2972:	89 8b       	std	Y+17, r24	; 0x11
    2974:	89 89       	ldd	r24, Y+17	; 0x11
    2976:	9a 89       	ldd	r25, Y+18	; 0x12
    2978:	01 97       	sbiw	r24, 0x01	; 1
    297a:	f1 f7       	brne	.-4      	; 0x2978 <main+0xa68>
    297c:	9a 8b       	std	Y+18, r25	; 0x12
    297e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2980:	8b 89       	ldd	r24, Y+19	; 0x13
    2982:	9c 89       	ldd	r25, Y+20	; 0x14
    2984:	01 97       	sbiw	r24, 0x01	; 1
    2986:	9c 8b       	std	Y+20, r25	; 0x14
    2988:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    298a:	8b 89       	ldd	r24, Y+19	; 0x13
    298c:	9c 89       	ldd	r25, Y+20	; 0x14
    298e:	00 97       	sbiw	r24, 0x00	; 0
    2990:	69 f7       	brne	.-38     	; 0x296c <main+0xa5c>
    2992:	14 c0       	rjmp	.+40     	; 0x29bc <main+0xaac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2994:	6d 89       	ldd	r22, Y+21	; 0x15
    2996:	7e 89       	ldd	r23, Y+22	; 0x16
    2998:	8f 89       	ldd	r24, Y+23	; 0x17
    299a:	98 8d       	ldd	r25, Y+24	; 0x18
    299c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	9c 8b       	std	Y+20, r25	; 0x14
    29a6:	8b 8b       	std	Y+19, r24	; 0x13
    29a8:	8b 89       	ldd	r24, Y+19	; 0x13
    29aa:	9c 89       	ldd	r25, Y+20	; 0x14
    29ac:	98 8b       	std	Y+16, r25	; 0x10
    29ae:	8f 87       	std	Y+15, r24	; 0x0f
    29b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    29b2:	98 89       	ldd	r25, Y+16	; 0x10
    29b4:	01 97       	sbiw	r24, 0x01	; 1
    29b6:	f1 f7       	brne	.-4      	; 0x29b4 <main+0xaa4>
    29b8:	98 8b       	std	Y+16, r25	; 0x10
    29ba:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(500);
			}
			i = 0;
    29bc:	fe 01       	movw	r30, r28
    29be:	ef 58       	subi	r30, 0x8F	; 143
    29c0:	ff 4f       	sbci	r31, 0xFF	; 255
    29c2:	10 82       	st	Z, r1
			memset(pass, '\0', 8*9);
    29c4:	ce 01       	movw	r24, r28
    29c6:	8c 58       	subi	r24, 0x8C	; 140
    29c8:	9f 4f       	sbci	r25, 0xFF	; 255
    29ca:	60 e0       	ldi	r22, 0x00	; 0
    29cc:	70 e0       	ldi	r23, 0x00	; 0
    29ce:	48 e4       	ldi	r20, 0x48	; 72
    29d0:	50 e0       	ldi	r21, 0x00	; 0
    29d2:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <memset>
			LCD_sendCommand(CLEAR_COMMAND);
    29d6:	81 e0       	ldi	r24, 0x01	; 1
    29d8:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_sendCommand>
			LCD_displayString("Enter password:");
    29dc:	84 e0       	ldi	r24, 0x04	; 4
    29de:	91 e0       	ldi	r25, 0x01	; 1
    29e0:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_displayString>
			LCD_goToRowColumn(1, 0);
    29e4:	81 e0       	ldi	r24, 0x01	; 1
    29e6:	60 e0       	ldi	r22, 0x00	; 0
    29e8:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_goToRowColumn>
			LCD_sendCommand(CURSOR_ON);
    29ec:	8e e0       	ldi	r24, 0x0E	; 14
    29ee:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_sendCommand>
			LCD_sendCommand(CURSOR_BLINKING);
    29f2:	8f e0       	ldi	r24, 0x0F	; 15
    29f4:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_sendCommand>
    29f8:	20 c0       	rjmp	.+64     	; 0x2a3a <main+0xb2a>
		} else {
			LCD_displayCharacter(key);
    29fa:	fe 01       	movw	r30, r28
    29fc:	ed 58       	subi	r30, 0x8D	; 141
    29fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2a00:	80 81       	ld	r24, Z
    2a02:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <LCD_displayCharacter>
			pass[i++] = key;
    2a06:	fe 01       	movw	r30, r28
    2a08:	ef 58       	subi	r30, 0x8F	; 143
    2a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0c:	80 81       	ld	r24, Z
    2a0e:	28 2f       	mov	r18, r24
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	ce 01       	movw	r24, r28
    2a14:	8c 58       	subi	r24, 0x8C	; 140
    2a16:	9f 4f       	sbci	r25, 0xFF	; 255
    2a18:	dc 01       	movw	r26, r24
    2a1a:	a2 0f       	add	r26, r18
    2a1c:	b3 1f       	adc	r27, r19
    2a1e:	fe 01       	movw	r30, r28
    2a20:	ed 58       	subi	r30, 0x8D	; 141
    2a22:	ff 4f       	sbci	r31, 0xFF	; 255
    2a24:	80 81       	ld	r24, Z
    2a26:	8c 93       	st	X, r24
    2a28:	de 01       	movw	r26, r28
    2a2a:	af 58       	subi	r26, 0x8F	; 143
    2a2c:	bf 4f       	sbci	r27, 0xFF	; 255
    2a2e:	fe 01       	movw	r30, r28
    2a30:	ef 58       	subi	r30, 0x8F	; 143
    2a32:	ff 4f       	sbci	r31, 0xFF	; 255
    2a34:	80 81       	ld	r24, Z
    2a36:	8f 5f       	subi	r24, 0xFF	; 255
    2a38:	8c 93       	st	X, r24
    2a3a:	80 e0       	ldi	r24, 0x00	; 0
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	a8 e4       	ldi	r26, 0x48	; 72
    2a40:	b3 e4       	ldi	r27, 0x43	; 67
    2a42:	8b 87       	std	Y+11, r24	; 0x0b
    2a44:	9c 87       	std	Y+12, r25	; 0x0c
    2a46:	ad 87       	std	Y+13, r26	; 0x0d
    2a48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a50:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	4a e7       	ldi	r20, 0x7A	; 122
    2a58:	53 e4       	ldi	r21, 0x43	; 67
    2a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	8f 83       	std	Y+7, r24	; 0x07
    2a64:	98 87       	std	Y+8, r25	; 0x08
    2a66:	a9 87       	std	Y+9, r26	; 0x09
    2a68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a6a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a6c:	78 85       	ldd	r23, Y+8	; 0x08
    2a6e:	89 85       	ldd	r24, Y+9	; 0x09
    2a70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	40 e8       	ldi	r20, 0x80	; 128
    2a78:	5f e3       	ldi	r21, 0x3F	; 63
    2a7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a7e:	88 23       	and	r24, r24
    2a80:	2c f4       	brge	.+10     	; 0x2a8c <main+0xb7c>
		__ticks = 1;
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	9e 83       	std	Y+6, r25	; 0x06
    2a88:	8d 83       	std	Y+5, r24	; 0x05
    2a8a:	3f c0       	rjmp	.+126    	; 0x2b0a <main+0xbfa>
	else if (__tmp > 65535)
    2a8c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a8e:	78 85       	ldd	r23, Y+8	; 0x08
    2a90:	89 85       	ldd	r24, Y+9	; 0x09
    2a92:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a94:	20 e0       	ldi	r18, 0x00	; 0
    2a96:	3f ef       	ldi	r19, 0xFF	; 255
    2a98:	4f e7       	ldi	r20, 0x7F	; 127
    2a9a:	57 e4       	ldi	r21, 0x47	; 71
    2a9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2aa0:	18 16       	cp	r1, r24
    2aa2:	4c f5       	brge	.+82     	; 0x2af6 <main+0xbe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aa6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aa8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aaa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	40 e2       	ldi	r20, 0x20	; 32
    2ab2:	51 e4       	ldi	r21, 0x41	; 65
    2ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab8:	dc 01       	movw	r26, r24
    2aba:	cb 01       	movw	r24, r22
    2abc:	bc 01       	movw	r22, r24
    2abe:	cd 01       	movw	r24, r26
    2ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac4:	dc 01       	movw	r26, r24
    2ac6:	cb 01       	movw	r24, r22
    2ac8:	9e 83       	std	Y+6, r25	; 0x06
    2aca:	8d 83       	std	Y+5, r24	; 0x05
    2acc:	0f c0       	rjmp	.+30     	; 0x2aec <main+0xbdc>
    2ace:	89 e1       	ldi	r24, 0x19	; 25
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	9c 83       	std	Y+4, r25	; 0x04
    2ad4:	8b 83       	std	Y+3, r24	; 0x03
    2ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad8:	9c 81       	ldd	r25, Y+4	; 0x04
    2ada:	01 97       	sbiw	r24, 0x01	; 1
    2adc:	f1 f7       	brne	.-4      	; 0x2ada <main+0xbca>
    2ade:	9c 83       	std	Y+4, r25	; 0x04
    2ae0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae6:	01 97       	sbiw	r24, 0x01	; 1
    2ae8:	9e 83       	std	Y+6, r25	; 0x06
    2aea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aec:	8d 81       	ldd	r24, Y+5	; 0x05
    2aee:	9e 81       	ldd	r25, Y+6	; 0x06
    2af0:	00 97       	sbiw	r24, 0x00	; 0
    2af2:	69 f7       	brne	.-38     	; 0x2ace <main+0xbbe>
    2af4:	3f ca       	rjmp	.-2946   	; 0x1f74 <main+0x64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af6:	6f 81       	ldd	r22, Y+7	; 0x07
    2af8:	78 85       	ldd	r23, Y+8	; 0x08
    2afa:	89 85       	ldd	r24, Y+9	; 0x09
    2afc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	9e 83       	std	Y+6, r25	; 0x06
    2b08:	8d 83       	std	Y+5, r24	; 0x05
    2b0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b0e:	9a 83       	std	Y+2, r25	; 0x02
    2b10:	89 83       	std	Y+1, r24	; 0x01
    2b12:	89 81       	ldd	r24, Y+1	; 0x01
    2b14:	9a 81       	ldd	r25, Y+2	; 0x02
    2b16:	01 97       	sbiw	r24, 0x01	; 1
    2b18:	f1 f7       	brne	.-4      	; 0x2b16 <main+0xc06>
    2b1a:	9a 83       	std	Y+2, r25	; 0x02
    2b1c:	89 83       	std	Y+1, r24	; 0x01
    2b1e:	2a ca       	rjmp	.-2988   	; 0x1f74 <main+0x64>

00002b20 <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
    2b20:	df 93       	push	r29
    2b22:	cf 93       	push	r28
    2b24:	cd b7       	in	r28, 0x3d	; 61
    2b26:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2b28:	eb e2       	ldi	r30, 0x2B	; 43
    2b2a:	f0 e0       	ldi	r31, 0x00	; 0
    2b2c:	82 e0       	ldi	r24, 0x02	; 2
    2b2e:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2b30:	ea e2       	ldi	r30, 0x2A	; 42
    2b32:	f0 e0       	ldi	r31, 0x00	; 0
    2b34:	88 e1       	ldi	r24, 0x18	; 24
    2b36:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    2b38:	e0 e4       	ldi	r30, 0x40	; 64
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	86 e8       	ldi	r24, 0x86	; 134
    2b3e:	80 83       	st	Z, r24
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    2b40:	e0 e4       	ldi	r30, 0x40	; 64
    2b42:	f0 e0       	ldi	r31, 0x00	; 0
    2b44:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    2b46:	e9 e2       	ldi	r30, 0x29	; 41
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	8c e0       	ldi	r24, 0x0C	; 12
    2b4c:	80 83       	st	Z, r24
}
    2b4e:	cf 91       	pop	r28
    2b50:	df 91       	pop	r29
    2b52:	08 95       	ret

00002b54 <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    2b54:	df 93       	push	r29
    2b56:	cf 93       	push	r28
    2b58:	0f 92       	push	r0
    2b5a:	cd b7       	in	r28, 0x3d	; 61
    2b5c:	de b7       	in	r29, 0x3e	; 62
    2b5e:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2b60:	eb e2       	ldi	r30, 0x2B	; 43
    2b62:	f0 e0       	ldi	r31, 0x00	; 0
    2b64:	80 81       	ld	r24, Z
    2b66:	88 2f       	mov	r24, r24
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	80 72       	andi	r24, 0x20	; 32
    2b6c:	90 70       	andi	r25, 0x00	; 0
    2b6e:	00 97       	sbiw	r24, 0x00	; 0
    2b70:	b9 f3       	breq	.-18     	; 0x2b60 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    2b72:	ec e2       	ldi	r30, 0x2C	; 44
    2b74:	f0 e0       	ldi	r31, 0x00	; 0
    2b76:	89 81       	ldd	r24, Y+1	; 0x01
    2b78:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    2b7a:	0f 90       	pop	r0
    2b7c:	cf 91       	pop	r28
    2b7e:	df 91       	pop	r29
    2b80:	08 95       	ret

00002b82 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    2b82:	df 93       	push	r29
    2b84:	cf 93       	push	r28
    2b86:	cd b7       	in	r28, 0x3d	; 61
    2b88:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2b8a:	eb e2       	ldi	r30, 0x2B	; 43
    2b8c:	f0 e0       	ldi	r31, 0x00	; 0
    2b8e:	80 81       	ld	r24, Z
    2b90:	88 23       	and	r24, r24
    2b92:	dc f7       	brge	.-10     	; 0x2b8a <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    2b94:	ec e2       	ldi	r30, 0x2C	; 44
    2b96:	f0 e0       	ldi	r31, 0x00	; 0
    2b98:	80 81       	ld	r24, Z
}
    2b9a:	cf 91       	pop	r28
    2b9c:	df 91       	pop	r29
    2b9e:	08 95       	ret

00002ba0 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    2ba0:	df 93       	push	r29
    2ba2:	cf 93       	push	r28
    2ba4:	00 d0       	rcall	.+0      	; 0x2ba6 <UART_sendString+0x6>
    2ba6:	0f 92       	push	r0
    2ba8:	cd b7       	in	r28, 0x3d	; 61
    2baa:	de b7       	in	r29, 0x3e	; 62
    2bac:	9b 83       	std	Y+3, r25	; 0x03
    2bae:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2bb0:	19 82       	std	Y+1, r1	; 0x01
    2bb2:	0e c0       	rjmp	.+28     	; 0x2bd0 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2bb4:	89 81       	ldd	r24, Y+1	; 0x01
    2bb6:	28 2f       	mov	r18, r24
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	8a 81       	ldd	r24, Y+2	; 0x02
    2bbc:	9b 81       	ldd	r25, Y+3	; 0x03
    2bbe:	fc 01       	movw	r30, r24
    2bc0:	e2 0f       	add	r30, r18
    2bc2:	f3 1f       	adc	r31, r19
    2bc4:	80 81       	ld	r24, Z
    2bc6:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <UART_sendByte>
		i++;
    2bca:	89 81       	ldd	r24, Y+1	; 0x01
    2bcc:	8f 5f       	subi	r24, 0xFF	; 255
    2bce:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2bd0:	89 81       	ldd	r24, Y+1	; 0x01
    2bd2:	28 2f       	mov	r18, r24
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd8:	9b 81       	ldd	r25, Y+3	; 0x03
    2bda:	fc 01       	movw	r30, r24
    2bdc:	e2 0f       	add	r30, r18
    2bde:	f3 1f       	adc	r31, r19
    2be0:	80 81       	ld	r24, Z
    2be2:	88 23       	and	r24, r24
    2be4:	39 f7       	brne	.-50     	; 0x2bb4 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2be6:	0f 90       	pop	r0
    2be8:	0f 90       	pop	r0
    2bea:	0f 90       	pop	r0
    2bec:	cf 91       	pop	r28
    2bee:	df 91       	pop	r29
    2bf0:	08 95       	ret

00002bf2 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    2bf2:	0f 93       	push	r16
    2bf4:	1f 93       	push	r17
    2bf6:	df 93       	push	r29
    2bf8:	cf 93       	push	r28
    2bfa:	00 d0       	rcall	.+0      	; 0x2bfc <UART_receiveString+0xa>
    2bfc:	0f 92       	push	r0
    2bfe:	cd b7       	in	r28, 0x3d	; 61
    2c00:	de b7       	in	r29, 0x3e	; 62
    2c02:	9b 83       	std	Y+3, r25	; 0x03
    2c04:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c06:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    2c08:	89 81       	ldd	r24, Y+1	; 0x01
    2c0a:	28 2f       	mov	r18, r24
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c10:	9b 81       	ldd	r25, Y+3	; 0x03
    2c12:	8c 01       	movw	r16, r24
    2c14:	02 0f       	add	r16, r18
    2c16:	13 1f       	adc	r17, r19
    2c18:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <UART_recieveByte>
    2c1c:	f8 01       	movw	r30, r16
    2c1e:	80 83       	st	Z, r24
    2c20:	0f c0       	rjmp	.+30     	; 0x2c40 <UART_receiveString+0x4e>
	while(Str[i] != '=')
	{
		i++;
    2c22:	89 81       	ldd	r24, Y+1	; 0x01
    2c24:	8f 5f       	subi	r24, 0xFF	; 255
    2c26:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2c28:	89 81       	ldd	r24, Y+1	; 0x01
    2c2a:	28 2f       	mov	r18, r24
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c30:	9b 81       	ldd	r25, Y+3	; 0x03
    2c32:	8c 01       	movw	r16, r24
    2c34:	02 0f       	add	r16, r18
    2c36:	13 1f       	adc	r17, r19
    2c38:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <UART_recieveByte>
    2c3c:	f8 01       	movw	r30, r16
    2c3e:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '=')
    2c40:	89 81       	ldd	r24, Y+1	; 0x01
    2c42:	28 2f       	mov	r18, r24
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	8a 81       	ldd	r24, Y+2	; 0x02
    2c48:	9b 81       	ldd	r25, Y+3	; 0x03
    2c4a:	fc 01       	movw	r30, r24
    2c4c:	e2 0f       	add	r30, r18
    2c4e:	f3 1f       	adc	r31, r19
    2c50:	80 81       	ld	r24, Z
    2c52:	8d 33       	cpi	r24, 0x3D	; 61
    2c54:	31 f7       	brne	.-52     	; 0x2c22 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    2c56:	89 81       	ldd	r24, Y+1	; 0x01
    2c58:	28 2f       	mov	r18, r24
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c60:	fc 01       	movw	r30, r24
    2c62:	e2 0f       	add	r30, r18
    2c64:	f3 1f       	adc	r31, r19
    2c66:	10 82       	st	Z, r1
}
    2c68:	0f 90       	pop	r0
    2c6a:	0f 90       	pop	r0
    2c6c:	0f 90       	pop	r0
    2c6e:	cf 91       	pop	r28
    2c70:	df 91       	pop	r29
    2c72:	1f 91       	pop	r17
    2c74:	0f 91       	pop	r16
    2c76:	08 95       	ret

00002c78 <__prologue_saves__>:
    2c78:	2f 92       	push	r2
    2c7a:	3f 92       	push	r3
    2c7c:	4f 92       	push	r4
    2c7e:	5f 92       	push	r5
    2c80:	6f 92       	push	r6
    2c82:	7f 92       	push	r7
    2c84:	8f 92       	push	r8
    2c86:	9f 92       	push	r9
    2c88:	af 92       	push	r10
    2c8a:	bf 92       	push	r11
    2c8c:	cf 92       	push	r12
    2c8e:	df 92       	push	r13
    2c90:	ef 92       	push	r14
    2c92:	ff 92       	push	r15
    2c94:	0f 93       	push	r16
    2c96:	1f 93       	push	r17
    2c98:	cf 93       	push	r28
    2c9a:	df 93       	push	r29
    2c9c:	cd b7       	in	r28, 0x3d	; 61
    2c9e:	de b7       	in	r29, 0x3e	; 62
    2ca0:	ca 1b       	sub	r28, r26
    2ca2:	db 0b       	sbc	r29, r27
    2ca4:	0f b6       	in	r0, 0x3f	; 63
    2ca6:	f8 94       	cli
    2ca8:	de bf       	out	0x3e, r29	; 62
    2caa:	0f be       	out	0x3f, r0	; 63
    2cac:	cd bf       	out	0x3d, r28	; 61
    2cae:	09 94       	ijmp

00002cb0 <__epilogue_restores__>:
    2cb0:	2a 88       	ldd	r2, Y+18	; 0x12
    2cb2:	39 88       	ldd	r3, Y+17	; 0x11
    2cb4:	48 88       	ldd	r4, Y+16	; 0x10
    2cb6:	5f 84       	ldd	r5, Y+15	; 0x0f
    2cb8:	6e 84       	ldd	r6, Y+14	; 0x0e
    2cba:	7d 84       	ldd	r7, Y+13	; 0x0d
    2cbc:	8c 84       	ldd	r8, Y+12	; 0x0c
    2cbe:	9b 84       	ldd	r9, Y+11	; 0x0b
    2cc0:	aa 84       	ldd	r10, Y+10	; 0x0a
    2cc2:	b9 84       	ldd	r11, Y+9	; 0x09
    2cc4:	c8 84       	ldd	r12, Y+8	; 0x08
    2cc6:	df 80       	ldd	r13, Y+7	; 0x07
    2cc8:	ee 80       	ldd	r14, Y+6	; 0x06
    2cca:	fd 80       	ldd	r15, Y+5	; 0x05
    2ccc:	0c 81       	ldd	r16, Y+4	; 0x04
    2cce:	1b 81       	ldd	r17, Y+3	; 0x03
    2cd0:	aa 81       	ldd	r26, Y+2	; 0x02
    2cd2:	b9 81       	ldd	r27, Y+1	; 0x01
    2cd4:	ce 0f       	add	r28, r30
    2cd6:	d1 1d       	adc	r29, r1
    2cd8:	0f b6       	in	r0, 0x3f	; 63
    2cda:	f8 94       	cli
    2cdc:	de bf       	out	0x3e, r29	; 62
    2cde:	0f be       	out	0x3f, r0	; 63
    2ce0:	cd bf       	out	0x3d, r28	; 61
    2ce2:	ed 01       	movw	r28, r26
    2ce4:	08 95       	ret

00002ce6 <memset>:
    2ce6:	dc 01       	movw	r26, r24
    2ce8:	01 c0       	rjmp	.+2      	; 0x2cec <memset+0x6>
    2cea:	6d 93       	st	X+, r22
    2cec:	41 50       	subi	r20, 0x01	; 1
    2cee:	50 40       	sbci	r21, 0x00	; 0
    2cf0:	e0 f7       	brcc	.-8      	; 0x2cea <memset+0x4>
    2cf2:	08 95       	ret

00002cf4 <itoa>:
    2cf4:	fb 01       	movw	r30, r22
    2cf6:	9f 01       	movw	r18, r30
    2cf8:	e8 94       	clt
    2cfa:	42 30       	cpi	r20, 0x02	; 2
    2cfc:	c4 f0       	brlt	.+48     	; 0x2d2e <itoa+0x3a>
    2cfe:	45 32       	cpi	r20, 0x25	; 37
    2d00:	b4 f4       	brge	.+44     	; 0x2d2e <itoa+0x3a>
    2d02:	4a 30       	cpi	r20, 0x0A	; 10
    2d04:	29 f4       	brne	.+10     	; 0x2d10 <itoa+0x1c>
    2d06:	97 fb       	bst	r25, 7
    2d08:	1e f4       	brtc	.+6      	; 0x2d10 <itoa+0x1c>
    2d0a:	90 95       	com	r25
    2d0c:	81 95       	neg	r24
    2d0e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d10:	64 2f       	mov	r22, r20
    2d12:	77 27       	eor	r23, r23
    2d14:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__udivmodhi4>
    2d18:	80 5d       	subi	r24, 0xD0	; 208
    2d1a:	8a 33       	cpi	r24, 0x3A	; 58
    2d1c:	0c f0       	brlt	.+2      	; 0x2d20 <itoa+0x2c>
    2d1e:	89 5d       	subi	r24, 0xD9	; 217
    2d20:	81 93       	st	Z+, r24
    2d22:	cb 01       	movw	r24, r22
    2d24:	00 97       	sbiw	r24, 0x00	; 0
    2d26:	a1 f7       	brne	.-24     	; 0x2d10 <itoa+0x1c>
    2d28:	16 f4       	brtc	.+4      	; 0x2d2e <itoa+0x3a>
    2d2a:	5d e2       	ldi	r21, 0x2D	; 45
    2d2c:	51 93       	st	Z+, r21
    2d2e:	10 82       	st	Z, r1
    2d30:	c9 01       	movw	r24, r18
    2d32:	0c 94 9b 16 	jmp	0x2d36	; 0x2d36 <strrev>

00002d36 <strrev>:
    2d36:	dc 01       	movw	r26, r24
    2d38:	fc 01       	movw	r30, r24
    2d3a:	67 2f       	mov	r22, r23
    2d3c:	71 91       	ld	r23, Z+
    2d3e:	77 23       	and	r23, r23
    2d40:	e1 f7       	brne	.-8      	; 0x2d3a <strrev+0x4>
    2d42:	32 97       	sbiw	r30, 0x02	; 2
    2d44:	04 c0       	rjmp	.+8      	; 0x2d4e <strrev+0x18>
    2d46:	7c 91       	ld	r23, X
    2d48:	6d 93       	st	X+, r22
    2d4a:	70 83       	st	Z, r23
    2d4c:	62 91       	ld	r22, -Z
    2d4e:	ae 17       	cp	r26, r30
    2d50:	bf 07       	cpc	r27, r31
    2d52:	c8 f3       	brcs	.-14     	; 0x2d46 <strrev+0x10>
    2d54:	08 95       	ret

00002d56 <__udivmodhi4>:
    2d56:	aa 1b       	sub	r26, r26
    2d58:	bb 1b       	sub	r27, r27
    2d5a:	51 e1       	ldi	r21, 0x11	; 17
    2d5c:	07 c0       	rjmp	.+14     	; 0x2d6c <__udivmodhi4_ep>

00002d5e <__udivmodhi4_loop>:
    2d5e:	aa 1f       	adc	r26, r26
    2d60:	bb 1f       	adc	r27, r27
    2d62:	a6 17       	cp	r26, r22
    2d64:	b7 07       	cpc	r27, r23
    2d66:	10 f0       	brcs	.+4      	; 0x2d6c <__udivmodhi4_ep>
    2d68:	a6 1b       	sub	r26, r22
    2d6a:	b7 0b       	sbc	r27, r23

00002d6c <__udivmodhi4_ep>:
    2d6c:	88 1f       	adc	r24, r24
    2d6e:	99 1f       	adc	r25, r25
    2d70:	5a 95       	dec	r21
    2d72:	a9 f7       	brne	.-22     	; 0x2d5e <__udivmodhi4_loop>
    2d74:	80 95       	com	r24
    2d76:	90 95       	com	r25
    2d78:	bc 01       	movw	r22, r24
    2d7a:	cd 01       	movw	r24, r26
    2d7c:	08 95       	ret

00002d7e <_exit>:
    2d7e:	f8 94       	cli

00002d80 <__stop_program>:
    2d80:	ff cf       	rjmp	.-2      	; 0x2d80 <__stop_program>
